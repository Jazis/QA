from time import sleep

import allure
from playwright.sync_api import Page, expect
from data.input_data.users import USER_01
from pages.pages import Pages
from steps import Steps
from utils.consts import DASHBOARD_URL, DASHBOARD_WALLETS_RANGE
#TODO:переписать класс

class TestDashboardWallets:
    @allure.title("Check page wallets")
    def test_dashboard_wallets(self, page: Page, pages: Pages,
                               steps: Steps, playwright):
        page.goto(DASHBOARD_WALLETS_RANGE)
        steps.auth.authorize_in_test(page, USER_01.login, USER_01.password, 'Wallets')
        pages.navigation_dashboard.wallets.click()
        assert pages.dashboard.tab_clients.is_visible()
        assert pages.dashboard.tab_operational.is_visible()
        assert pages.dashboard.input_company.is_visible()
        assert pages.dashboard.filter_blockchain.is_visible()
        expect(page.locator("//button//span[contains(text(), 'Token')]")).to_be_visible()
        assert pages.dashboard.filter_token.is_visible()
        assert pages.dashboard.filter_status.is_visible()
        assert pages.dashboard.filter_company.is_visible()
        assert pages.dashboard.filter_account.is_visible()
        steps.universalSteps.check_titles_at_table(page, '1', 'Wallet')
        steps.universalSteps.check_titles_at_table(page, '2', 'Blockchain')
        steps.universalSteps.check_titles_at_table(page, '3', 'Token')
        steps.universalSteps.check_titles_at_table(page, '4', 'Status')
        steps.universalSteps.check_titles_at_table(page, '5', 'Vault')
        steps.universalSteps.check_titles_at_table(page, '6', 'Company')
        steps.universalSteps.check_titles_at_table(page, '7', 'Account number')
        steps.universalSteps.check_titles_at_table(page, '8', 'Money in')
        steps.universalSteps.check_titles_at_table(page, '9', 'Balance')
        expect(page.locator("(//th[contains(@class, 'text-align_end')])[2]")).to_have_text('Balance')
        expect(page.locator("(//th[contains(@class, 'text-align_end')])[3]")).to_have_text('$3,010.00')
        expect(page.locator("(//th[contains(@class, 'text-align_end')])[4]")).to_have_text('$0.00')

    @allure.title("Check search no results")
    def test_check_search_no_results(self, page: Page, pages: Pages, steps: Steps, playwright):
        page.goto(DASHBOARD_URL)
        steps.auth.authorize_in_test(page, USER_01.login, USER_01.password, 'Companies')
        pages.navigation_dashboard.wallets.click()
        expect(page.locator('//h1')).to_have_text('Wallets')
        page.locator("//input").fill('kdlfgldfgjdla')
        sleep(1.5)
        assert pages.dashboard.no_results.is_visible()
        assert pages.dashboard.text_change_filter.is_visible()
        pages.dashboard.btn_clear_filters.click()
        expect(page.locator("//button//span[contains(text(), 'SomeAddress')]")).to_be_visible()
        assert pages.dashboard.btn_clear_filters.is_not_on_page()

    @allure.title("Check filter Blockchain")
    def test_check_filter_blockchain(self, page: Page, pages: Pages, steps: Steps, playwright):
        page.goto(DASHBOARD_URL)
        steps.auth.authorize_in_test(page, USER_01.login, USER_01.password, 'Companies')
        pages.navigation_dashboard.wallets.click()
        expect(page.locator('//h1')).to_have_text('Wallets')
        page.locator("//button//span[contains(text(), 'Blockchain')]").click()
        expect(page.locator("//span[contains(text(), 'TRC-20')]")).to_be_visible()
        expect(page.locator("//span[contains(text(), 'ERC-20')]")).to_be_visible()
        page.locator("//span[contains(text(), 'TRC-20')]").click()
        page.locator("//span[contains(text(), 'ERC-20')]").click()
        page.locator("//button//span[contains(text(), 'Blockchain')]").click()
        pages.dashboard.tag.check_text('TRC-20, ERC-20')
        pages.dashboard.tag_close.click()
        assert pages.dashboard.tag.is_not_on_page()

    @allure.title("Check filter token")
    def test_check_filter_token(self, page: Page, pages: Pages, steps: Steps, playwright):
        page.goto(DASHBOARD_URL)
        steps.auth.authorize_in_test(page, USER_01.login, USER_01.password, 'Companies')
        pages.navigation_dashboard.wallets.click()
        expect(page.locator('//h1')).to_have_text('Wallets')
        page.locator("//button//span[contains(text(), 'Token')]").click()
        expect(page.locator("//span[contains(text(), 'USDT (TRC-20)')]")).to_be_visible()
        expect(page.locator("//span[contains(text(), 'string (string)')]")).to_be_visible()
        page.locator("//span[contains(text(), 'USDT (TRC-20)')]").click()
        page.locator("//span[contains(text(), 'string (string)')]").click()
        page.locator("//button//span[contains(text(), 'Token')]").click()
        pages.dashboard.tag.check_text('USDT (TRC-20), string (string)')
        pages.dashboard.tag_close.click()
        assert pages.dashboard.tag.is_not_on_page()

    @allure.title("Check filter token")
    def test_check_filter_token(self, page: Page, pages: Pages, steps: Steps, playwright):
        page.goto(DASHBOARD_URL)
        steps.auth.authorize_in_test(page, USER_01.login, USER_01.password, 'Companies')
        pages.navigation_dashboard.wallets.click()
        expect(page.locator('//h1')).to_have_text('Wallets')
        page.locator("//button//span[contains(text(), 'Status')]").click()
        expect(page.locator("//label//span[contains(text(), 'Active')]")).to_be_visible()
        expect(page.locator("//span[contains(text(), 'Closed')]")).to_be_visible()
        page.locator("//label//span[contains(text(), 'Active')]").click()
        page.locator("//span[contains(text(), 'Closed')]").click()
        page.locator("//button//span[contains(text(), 'Status')]").click()
        pages.dashboard.tag.check_text('Active, Closed')
        pages.dashboard.tag_close.click()
        assert pages.dashboard.tag.is_not_on_page()

    @allure.title("Check filter Company")
    def test_check_filter_company(self, page: Page, pages: Pages, steps: Steps, playwright):
        page.goto(DASHBOARD_URL)
        steps.auth.authorize_in_test(page, USER_01.login, USER_01.password, 'Companies')
        pages.navigation_dashboard.wallets.click()
        expect(page.locator('//h1')).to_have_text('Wallets')
        page.locator("//button//span[contains(text(), 'Company')]").click()
        page.locator("//label//span[contains(text(), '2 – Beeline')]").click()
        page.locator("//label//span[contains(text(), '1 – MTS')]").click()
        pages.dashboard.tag.check_text('2 – Beeline, 1 – MTS')
        pages.dashboard.tag_close.click()
        assert pages.dashboard.tag.is_not_on_page()

    @allure.title("Check filter Account")
    def test_check_filter_account(self, page: Page, pages: Pages, steps: Steps, playwright):
        page.goto(DASHBOARD_URL)
        steps.auth.authorize_in_test(page, USER_01.login, USER_01.password, 'Companies')
        pages.navigation_dashboard.wallets.click()
        expect(page.locator('//h1')).to_have_text('Wallets')
        page.locator("//button//span[contains(text(), 'Account')]").click()
        page.locator("//label//span[contains(text(), '1021481')]").click()
        pages.dashboard.tag.check_text('1021481')
        pages.dashboard.tag_close.click()
        assert pages.dashboard.tag.is_not_on_page()

    @allure.title("Check search in filter Company")
    def test_check_search_in_filter_company(self, page: Page, pages: Pages, steps: Steps, playwright):
        page.goto(DASHBOARD_URL)
        steps.auth.authorize_in_test(page, USER_01.login, USER_01.password, 'Companies')
        pages.navigation_dashboard.wallets.click()
        expect(page.locator('//h1')).to_have_text('Wallets')
        page.locator("//button//span[contains(text(), 'Company')]").click()
        expect(page.locator('//*[@data-test-id="row-virtualizer"]')).to_have_text('2 – Beeline1 – MTS')
        page.locator('(//input)[2]').fill('m')
        expect(page.locator('//*[@data-test-id="row-virtualizer"]')).to_have_text('1 – MTS')
        page.locator("//label//span[contains(text(), '1 – MTS')]").click()
        pages.dashboard.tag.check_text('1 – MTS')

    @allure.title("Check wallet")
    def test_check_wallet(self, page: Page, pages: Pages, steps: Steps, playwright):
        page.goto(DASHBOARD_WALLETS_RANGE)
        steps.auth.authorize_in_test(page, USER_01.login, USER_01.password, 'Wallets')
        expect(page.locator('//div[contains(@class, "display_flex align-items_center gap_3")]//*[@data-test-id="avatar"]')).to_be_visible()
        expect(page.locator("//div[contains(@class, 'display_flex align-items_center gap_3')]//span[contains(text(), 'SomeAddress')]")).to_be_visible()
        expect(page.locator("//td[contains(text(), 'ERC-20')]")).to_be_visible()
        expect(page.locator("//td[contains(text(), 'USDT')]")).to_be_visible()
        expect(page.locator('//div[@data-test-id="badge"]')).to_have_text('Active')
        expect(page.locator('//td[contains(text(), "DEPOSIT")]')).to_be_visible()
        expect(page.locator('(//div[@data-test-id="avatar"])[3]')).to_be_visible()
        steps.universalSteps.check_any_text_at_row_table(page, '7', '1021481')
        steps.universalSteps.check_any_text_at_row_table(page, '8', '$3,010.00')
        steps.universalSteps.check_any_text_at_row_table(page, '9', '$0.00')
        pages.dashboard.table_pagination.check_text('1 wallet')

    @allure.title("Check page Operational")
    def test_check_page_operational(self, page: Page, pages: Pages, steps: Steps, playwright):
        page.goto(DASHBOARD_WALLETS_RANGE)
        steps.auth.authorize_in_test(page, USER_01.login, USER_01.password, 'Wallets')
        page.locator("//div[contains(text(), 'Operational')]").click()
        assert pages.dashboard.tab_clients.is_visible()
        assert pages.dashboard.tab_operational.is_visible()
        assert pages.dashboard.input_company.is_visible()
        assert pages.dashboard.filter_blockchain.is_visible()
        assert pages.dashboard.filter_token.is_visible()
        assert pages.dashboard.filter_status.is_visible()
        assert pages.dashboard.filter_button_company.is_visible()
        assert pages.dashboard.filter_account.is_visible()
        steps.universalSteps.check_titles_at_table(page, '1', 'Wallet')
        steps.universalSteps.check_titles_at_table(page, '2', 'Blockchain')
        steps.universalSteps.check_titles_at_table(page, '3', 'Token')
        steps.universalSteps.check_titles_at_table(page, '4', 'Status')
        steps.universalSteps.check_titles_at_table(page, '5', 'Vault')
        steps.universalSteps.check_titles_at_table(page, '6', 'Company')
        steps.universalSteps.check_titles_at_table(page, '7', 'Account number')
        steps.universalSteps.check_titles_at_table(page, '8', 'Money in')
        steps.universalSteps.check_titles_at_table(page, '9', 'Balance')
        expect(page.locator('//*[@data-test-id="item-with-pip"]')).to_be_visible()
        expect(page.locator("//td//*[@data-test-id='popper-activator']")).to_have_text('expense_addr')
        steps.universalSteps.check_any_text_at_row_table(page, '2', 'TRC-20')
        steps.universalSteps.check_any_text_at_row_table(page, '3', 'USDT')
        steps.universalSteps.check_any_text_at_row_table(page, '4', 'Active')
        steps.universalSteps.check_any_text_at_row_table(page, '5', 'Expense')




