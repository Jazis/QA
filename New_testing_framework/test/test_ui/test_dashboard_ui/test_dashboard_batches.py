from time import sleep

import allure
import pytest
from playwright.sync_api import Page, expect

from data.input_data.users import USER_01
from pages.pages import Pages
from steps import Steps
from utils.consts import DASHBOARD_BATCHES_RANGE

#Переписать
class TestDashboardBatches:

    @pytest.mark.skip("")
    @allure.title("Check page batches")
    def test_check_page_batches(self, page: Page, pages: Pages, steps: Steps, playwright):
        page.goto(DASHBOARD_BATCHES_RANGE)
        steps.auth.authorize_in_test(page, USER_01.login, USER_01.password, 'Batches')
        steps.dashboardSteps.check_widget_batches(page, 'Loan', '$0.00')
        steps.dashboardSteps.check_widget_batches(page, 'Swap', '$0.00')
        steps.dashboardSteps.check_widget_batches(page, 'Off-ramp', '$2,700.00')
        steps.dashboardSteps.check_widget_batches(page, 'Bank account', '$0.00')

        steps.dashboardSteps.check_tabs_batches(page, 'All batches')
        steps.dashboardSteps.check_tabs_batches(page, 'Loan')
        steps.dashboardSteps.check_tabs_batches(page, 'Netting')
        steps.dashboardSteps.check_tabs_batches(page, 'Swap')
        steps.dashboardSteps.check_tabs_batches(page, 'Off-ramp')
        steps.dashboardSteps.check_tabs_batches(page, 'Bank account')
        steps.dashboardSteps.check_tabs_batches(page, 'In progress')

        expect(page.locator('//*[@placeholder="Batch or loan ID"]')).to_be_visible()
        expect(page.locator('//*[@data-test-id="button"]//span[contains(text(), "Type")]')).to_be_visible()
        expect(page.locator('//*[@data-test-id="button"]//span[contains(text(), "ID")]')).to_be_visible()
        expect(page.locator('//*[@data-test-id="button"]//span[contains(text(), "Status")]')).to_be_visible()
        expect(page.locator('//*[@data-test-id="button"]//span[contains(text(), "Provider")]')).to_be_visible()


    @pytest.mark.skip("")
    @allure.title("Check table batches")
    def test_check_table_batches(self, page: Page, pages: Pages, steps: Steps, playwright):
        page.goto(DASHBOARD_BATCHES_RANGE)
        steps.auth.authorize_in_test(page, USER_01.login, USER_01.password, 'Batches')
        steps.universalSteps.check_titles_at_table(page, '1', 'Datetime')
        steps.universalSteps.check_titles_at_table(page, '2', 'Type')
        steps.universalSteps.check_titles_at_table(page, '3', 'ID')
        steps.universalSteps.check_titles_at_table(page, '4', 'Status')
        steps.universalSteps.check_titles_at_table(page, '5', 'Amount')
        steps.universalSteps.check_titles_at_table(page, '6', 'Token')
        steps.universalSteps.check_titles_at_table(page, '7', 'Provider')
        expect(page.get_by_text('6 batches')).to_be_visible()
        expect(page.locator('(//*[@data-test-id="date-popover"])[1]')).to_have_text('27 Aug, 10:49')
        expect(page.locator('(//*[@data-test-id="date-popover"])[2]')).to_have_text('22 Aug, 13:40')
        expect(page.locator('(//*[@data-test-id="date-popover"])[3]')).to_have_text('12 Aug, 12:50')
        expect(page.locator('(//*[@data-test-id="date-popover"])[4]')).to_have_text('26 Mar, 16:25')
        expect(page.locator('(//*[@data-test-id="date-popover"])[5]')).to_have_text('26 Mar, 16:22')
        expect(page.locator('(//*[@data-test-id="date-popover"])[6]')).to_have_text('26 Mar, 16:20')

        expect(page.locator('(//*[contains(@class, "table-row_subdued hover-visible-container")])[1]/td[2]')).to_have_text('Loan')
        expect(page.locator('(//*[contains(@class, "table-row_subdued hover-visible-container")])[1]/td[3]')).to_have_text('10')
        expect(page.locator('(//*[contains(@class, "table-row_subdued hover-visible-container")])[1]/td[4]')).to_have_text('Canceled')
        expect(page.locator('(//*[contains(@class, "table-row_subdued hover-visible-container")])[1]/td[5]')).to_have_text('55.00')
        expect(page.locator('(//*[contains(@class, "table-row_subdued hover-visible-container")])[1]/td[6]')).to_have_text('USDT (TRC-20)')
        expect(page.locator('(//*[contains(@class, "table-row_subdued hover-visible-container")])[1]/td[7]')).to_have_text('Fireblocks')
        expect(page.locator('(//*[contains(@class, "table-row_subdued hover-visible-container")])[1]/td[8]//span')).to_have_text('Transactions')
        expect(page.locator('(//*[contains(@class, "hover-visible-container")])[4]/td[4]')).to_have_text('Offramp')
        expect(page.locator('(//*[contains(@class, "hover-visible-container")])[4]/td[7]')).to_have_text('ConnexPay')
        steps.dashboardSteps.check_status_in_row(page, '5', 'Loan cleared')
        page.locator('(//*[@data-test-id="button-link"])[1]').hover()
        page.locator('(//*[@data-test-id="button-link"])[1]//*[@data-slot="icon"]').click()
        expect(page.locator('//*[@data-test-id="menu-content"]')).to_have_text('FireblocksOfframp ProviderCore PayQolo')

    @allure.title("Check types of filters")
    def test_check_types_of_filters(self, page: Page, pages: Pages, steps: Steps, playwright):
        page.goto(DASHBOARD_BATCHES_RANGE)
        steps.auth.authorize_in_test(page, USER_01.login, USER_01.password, 'Batches')
        page.locator("//*[@data-test-id='popper-activator']//span[contains(text(), 'Type')]").click()
        steps.dashboardSteps.check_filters_batches(page, 'Loan')
        steps.dashboardSteps.check_filters_batches(page, 'Batch')
        steps.dashboardSteps.check_filters_batches(page, 'Netting')
        steps.dashboardSteps.check_filters_batches(page, 'Netting')
        page.locator("//*[@data-test-id='popper-activator']//span[contains(text(), 'ID')]").click()
        steps.dashboardSteps.check_filters_batches(page, '4')
        page.locator("//*[@data-test-id='popper-activator']//span[contains(text(), 'Status')]").click()
        steps.dashboardSteps.check_filters_batches(page, 'Treasury')
        steps.dashboardSteps.check_filters_batches(page, 'Card Provider')
        steps.dashboardSteps.check_filters_batches(page, 'Loan issued')
        steps.dashboardSteps.check_filters_batches(page, 'Loan cleared')
        steps.dashboardSteps.check_filters_batches(page, 'Swap')
        steps.dashboardSteps.check_filters_batches(page, 'Offramp')
        steps.dashboardSteps.check_filters_batches(page, 'Bank account')
        steps.dashboardSteps.check_filters_batches(page, 'Netting')
        steps.dashboardSteps.check_filters_batches(page, 'Transit')
        steps.dashboardSteps.check_filters_batches(page, 'Pending')
        steps.dashboardSteps.check_filters_batches(page, 'Canceled')
        steps.dashboardSteps.check_filters_batches(page, 'Credit Account')
        page.locator("//*[@data-test-id='popper-activator']//span[contains(text(), 'Token')]").click()
        steps.dashboardSteps.check_filters_batches(page, 'USDT (TRC-20)')
        page.locator("//*[@data-test-id='filters-filters']//button//span[contains(text(), 'Provider')]").click()
        steps.dashboardSteps.check_filters_batches(page, 'ConnexPay')
        steps.dashboardSteps.check_filters_batches(page, 'Fireblocks')
        steps.dashboardSteps.check_filters_batches(page, 'Offramp Provider')
        steps.dashboardSteps.check_filters_batches(page, 'Core Pay')

    @pytest.mark.skip("")
    @allure.title("Click button 'Transactions'")
    def test_click_button_transactions(self, page: Page, pages: Pages, steps: Steps, playwright):
        page.goto(DASHBOARD_BATCHES_RANGE)
        steps.auth.authorize_in_test(page, USER_01.login, USER_01.password, 'Batches')
        page.locator("(//*[@data-test-id='button']//span[contains(text(), 'Transactions')])[6]").click()
        expect(page.locator("//h1")).to_have_text('Crypto topup')
        pages.dashboard.table_pagination.check_text('2 top-ups')
        pages.dashboard.tag.check_text('1')
        expect(page.locator("//*[contains(@class, 'display_flex align-items_center gap_2')]//span[contains(text(), '6 – ConnCompany')]")).to_be_visible()
        expect(page.locator("//*[contains(@class, 'display_flex align-items_center gap_2')]//span[contains(text(), '43 – TestAirtable')]")).to_be_visible()
        steps.dashboardSteps.check_status_in_row(page, '1', 'Top-up done')
        steps.dashboardSteps.check_status_in_row(page, '3', 'Top-up done')
        steps.dashboardSteps.check_status_in_row(page, '2', 'Master account')
        steps.dashboardSteps.check_status_in_row(page, '4', 'Master account')
        steps.dashboardSteps.check_text_at_row_companies(page, '1', '$5,000.00')
        steps.dashboardSteps.check_text_at_row_companies(page, '2', '$50.00')

    @allure.title("Filter by type")
    def test_filter_by_type(self, page: Page, pages: Pages, steps: Steps, playwright):
        page.goto(DASHBOARD_BATCHES_RANGE)
        steps.auth.authorize_in_test(page, USER_01.login, USER_01.password, 'Batches')
        page.locator("//*[@data-test-id='popper-activator']//span[contains(text(), 'Type')]").click()
        page.locator("//*[@data-test-id='button-group']//span[contains(text(), 'Batch')]").click()
        pages.dashboard.table_pagination.check_text('2 batches')
        expect(page.locator("(//tr[contains(@class, 'hover-visible-container')])[1]")).to_have_text('26 Mar, 16:25Batch5Offramp2,000.00USDT (TRC-20)ConnexPayTransactions')
        expect(page.locator("(//tr[contains(@class, 'hover-visible-container')])[2]")).to_have_text('26 Mar, 16:20Batch1Offramp700.00USDT (TRC-20)ConnexPayTransactions')

    @allure.title("Filter by id ang status")
    def test_filter_by_id_and_status(self, page: Page, pages: Pages, steps: Steps, playwright):
        page.goto(DASHBOARD_BATCHES_RANGE)
        steps.auth.authorize_in_test(page, USER_01.login, USER_01.password, 'Batches')
        page.locator("//*[@data-test-id='popper-activator']//span[contains(text(), 'ID')]").click()
        page.locator("(//*[@data-test-id='checkbox'])[5]").click()
        page.locator("//*[@data-test-id='popper-activator']//span[contains(text(), 'Status')]").click()
        page.locator("(//*[@data-test-id='checkbox'])[11]").click()
        pages.dashboard.table_pagination.check_text('1 batch')
        expect(page.locator("(//tr[contains(@class, 'hover-visible-container')])[1]")).to_have_text('22 Aug, 13:40Loan9Canceled500.00USDT (TRC-20)FireblocksTransactions')

    @allure.title("Filter by token ang provider")
    def test_filter_by_token_and_provider(self, page: Page, pages: Pages, steps: Steps, playwright):
        page.goto(DASHBOARD_BATCHES_RANGE)
        steps.auth.authorize_in_test(page, USER_01.login, USER_01.password, 'Batches')
        page.locator("//*[@data-test-id='popper-activator']//span[contains(text(), 'Token')]").click()
        page.locator("(//*[@data-test-id='checkbox'])[1]").click()
        page.locator("//*[@data-test-id='filters-filters']//button//span[contains(text(), 'Provider')]").click()
        page.locator("(//*[@data-test-id='checkbox'])[4]").click()
        pages.dashboard.table_pagination.check_text('2 batches')
        pages.dashboard.tag.check_text('USDT (TRC-20)')
        pages.dashboard.tag_2.check_text('ConnexPay')
        expect(page.locator("(//tr[contains(@class, 'hover-visible-container')])[1]")).to_have_text('26 Mar, 16:25Batch5Offramp2,000.00USDT (TRC-20)ConnexPayTransactions')
        expect(page.locator("(//tr[contains(@class, 'hover-visible-container')])[2]")).to_have_text('26 Mar, 16:20Batch1Offramp700.00USDT (TRC-20)ConnexPayTransactions')

    @allure.title("Search by batch id")
    def test_search_by_batch_id(self, page: Page, pages: Pages, steps: Steps, playwright):
        page.goto(DASHBOARD_BATCHES_RANGE)
        steps.auth.authorize_in_test(page, USER_01.login, USER_01.password, 'Batches')
        page.locator('//*[@data-test-id="text-field"]//input').fill('10')
        pages.dashboard.table_pagination.check_text('1 batch')
        expect(page.locator("(//tr[contains(@class, 'hover-visible-container')])[1]")).to_have_text("27 Aug, 10:49Loan10Canceled55.00USDT (TRC-20)FireblocksTransactions")
        page.locator('//*[@data-test-id="button-link"]').click()
        pages.dashboard.table_pagination.check_text('6 batches')

    @pytest.mark.skip("")
    @allure.title("Check Loan")
    def test_check_loan(self, page: Page, pages: Pages, steps: Steps, playwright):
        page.goto(DASHBOARD_BATCHES_RANGE)
        steps.auth.authorize_in_test(page, USER_01.login, USER_01.password, 'Batches')
        page.locator('//*[@data-test-id="tab"]//div[contains(text(), "Loan")]').click()
        pages.dashboard.tag.check_text('Loan')
        pages.dashboard.table_pagination.check_text('4 batches')
        steps.universalSteps.check_any_text_at_row_table(page, '2', 'Loan')
        steps.universalSteps.check_any_text_at_row_table(page, '10', 'Loan')
        steps.universalSteps.check_any_text_at_row_table(page, '18', 'Loan')
        steps.universalSteps.check_any_text_at_row_table(page, '26', 'Loan')


    @allure.title("Check Netting")
    def test_check_netting(self, page: Page, pages: Pages, steps: Steps, playwright):
        page.goto(DASHBOARD_BATCHES_RANGE)
        steps.auth.authorize_in_test(page, USER_01.login, USER_01.password, 'Batches')
        page.locator('//*[@data-test-id="tab"]//div[contains(text(), "Netting")]').click()
        pages.dashboard.tag.check_text('Netting')
        sleep(1)
        assert pages.dashboard.no_results.is_visible()
        assert pages.dashboard.text_change_filter.is_visible()
        page.locator('//*[@data-test-id="state-card"]//button').click()
        assert pages.dashboard.tag.is_not_on_page()
        pages.dashboard.table_pagination.check_text('6 batches')

    @allure.title("Check Swap")
    def test_check_swap(self, page: Page, pages: Pages, steps: Steps, playwright):
        page.goto(DASHBOARD_BATCHES_RANGE)
        steps.auth.authorize_in_test(page, USER_01.login, USER_01.password, 'Batches')
        page.locator('//*[@data-test-id="tab"]//div[contains(text(), "Swap")]').click()
        pages.dashboard.tag.check_text('Swap')
        sleep(1)
        assert pages.dashboard.no_results.is_visible()
        pages.dashboard.text_change_filter.is_visible()

    @allure.title("Check Offramp")
    def test_check_offramp(self, page: Page, pages: Pages, steps: Steps, playwright):
        page.goto(DASHBOARD_BATCHES_RANGE)
        steps.auth.authorize_in_test(page, USER_01.login, USER_01.password, 'Batches')
        page.locator('//*[@data-test-id="tab"]//div[contains(text(), "Off-ramp")]').click()
        pages.dashboard.tag.check_text('Offramp')
        pages.dashboard.table_pagination.check_text('2 batches')
        steps.universalSteps.check_any_text_at_row_table(page, '4', 'Offramp')
        steps.universalSteps.check_any_text_at_row_table(page, '12', 'Offramp')

    @allure.title("Check Bank account")
    def test_check_bank_account(self, page: Page, pages: Pages, steps: Steps, playwright):
        page.goto(DASHBOARD_BATCHES_RANGE)
        steps.auth.authorize_in_test(page, USER_01.login, USER_01.password, 'Batches')
        page.locator('//*[@data-test-id="tab"]//div[contains(text(), "Bank account")]').click()
        pages.dashboard.tag.check_text('Bank account')
        sleep(1)
        assert pages.dashboard.no_results.is_visible()
        assert pages.dashboard.text_change_filter.is_visible()

    @pytest.mark.skip("")
    @allure.title("Check In progress")
    def test_check_in_progress(self, page: Page, pages: Pages, steps: Steps, playwright):
        page.goto(DASHBOARD_BATCHES_RANGE)
        steps.auth.authorize_in_test(page, USER_01.login, USER_01.password, 'Batches')
        page.locator('//*[@data-test-id="tab"]//div[contains(text(), "In progress")]').click()
        pages.dashboard.tag.check_text('Swap, Offramp, Bank account')
        pages.dashboard.table_pagination.check_text('2 batches')
        steps.universalSteps.check_any_text_at_row_table(page, '2', 'Batch')
        steps.universalSteps.check_any_text_at_row_table(page, '4', 'Offramp')
        page.locator('//*[@data-test-id="tab"]//div[contains(text(), "All batches")]').click()
        pages.dashboard.table_pagination.check_text('6 batches')

    @pytest.mark.skip("")
    @allure.title("Check tab All batches")
    def test_check_tab_all_batches(self, page: Page, pages: Pages, steps: Steps, playwright):
        page.goto(DASHBOARD_BATCHES_RANGE)
        steps.auth.authorize_in_test(page, USER_01.login, USER_01.password, 'Batches')
        pages.dashboard.table_pagination.check_text('6 batches')
        expect(page.locator('(//*[@data-test-id="pip"])[1]')).to_have_css("color", "rgba(20, 21, 26, 0.6)")
        expect(page.locator('(//*[@data-test-id="pip"])[4]')).to_have_css("color", "rgb(102, 51, 255)")
        expect(page.locator('(//*[@data-test-id="pip"])[5]')).to_have_css("color", "rgb(253, 176, 34)")
        expect(page.locator('(//td)[2]')).to_have_css("color", "rgba(20, 21, 26, 0.6)")
        expect(page.locator('(//td)[28]')).to_have_css("color", "rgb(20, 21, 26)")
        expect(page.locator('(//td)[36]')).to_have_css("color", "rgba(20, 21, 26, 0.6)")
        steps.dashboardSteps.check_text_at_row_companies(page, '2', '500.00')
        steps.dashboardSteps.check_text_at_row_companies(page, '3', '500.00')
        steps.dashboardSteps.check_text_at_row_companies(page, '4', '2,000.00')
        steps.dashboardSteps.check_text_at_row_companies(page, '5', '10.00')
        steps.dashboardSteps.check_text_at_row_companies(page, '6', '700.00')

