from time import sleep

import allure

from playwright.sync_api import Page, expect

from api.function_api import api_request_context, auth_token, api_create_company
from data.input_data.random_data import random_string
from data.input_data.users import USER_01
from pages.pages import Pages
from steps import Steps
from utils.consts import DASHBOARD_URL, DASHBOARD_URL_ETALON_RANGE, DASHBOARD_URL_ETALON_RANGE_ORDERING_SPEND, \
    DASHBOARD_COMPANIES_RANGE, DASHBOARD_CASH_TODAY


class TestDashboardCompanies:
    @allure.title("Check page dashboard companies")
    def test_check_dashboard_companies(self, page: Page, pages: Pages,
                                       steps: Steps, playwright):
        page.goto(DASHBOARD_URL_ETALON_RANGE)
        steps.auth.authorize_in_test(page, USER_01.login, USER_01.password, 'Companies')
        assert pages.team.button_invite.is_visible()
        pages.dashboard.filter_trans.is_on_page()
        assert pages.dashboard.filter_status.is_visible()
        assert pages.dashboard.filter_by_owner.is_visible()
        assert pages.dashboard.title_table_company.is_visible()
        assert pages.dashboard.title_table_status.is_visible()
        assert pages.dashboard.title_table_issue.is_visible()
        assert pages.dashboard.title_table_trans.is_visible()
        assert pages.dashboard.title_table_avg.is_visible()
        assert pages.dashboard.title_table_decline.is_visible()
        assert pages.dashboard.title_table_international.is_visible()
        assert pages.dashboard.title_table_money_in.is_visible()
        assert pages.dashboard.title_table_spend.is_visible()

    @allure.title("Check total row table")
    def test_check_total_row_table(self, page: Page, pages: Pages,
                                   steps: Steps, playwright):
        page.goto(DASHBOARD_URL_ETALON_RANGE)
        steps.auth.authorize_in_test(page, USER_01.login, USER_01.password, 'Companies')
        pages.dashboard.total_row_table.check_text("18 May – 19 May149$58.5418.4%$117.0060.0%$0($1,656.14)")

    @allure.title("Check total spend")
    def test_check_total_spend(self, page: Page, pages: Pages,
                               steps: Steps, playwright):
        page.goto(DASHBOARD_URL_ETALON_RANGE)
        steps.auth.authorize_in_test(page, USER_01.login, USER_01.password, 'Companies')
        page.locator("(//*[@data-test-id = 'info-popover-activator']//div)[2]").hover()
        steps.dashboardSteps.check_total_spend(page)

    @allure.title("Check each row in table")
    def test_check_each_row_table(self, page: Page, pages: Pages,
                                  steps: Steps, playwright):
        page.goto(DASHBOARD_URL_ETALON_RANGE_ORDERING_SPEND)
        steps.auth.authorize_in_test(page, USER_01.login, USER_01.password, 'Companies')
        steps.dashboardSteps.check_each_row_table(page)

    @allure.title("Check rows in total")
    def test_check_total_rows_table(self, page: Page, pages: Pages,
                                        steps: Steps, playwright):
        page.goto(DASHBOARD_URL_ETALON_RANGE_ORDERING_SPEND)
        steps.auth.authorize_in_test(page, USER_01.login, USER_01.password, 'Companies')
        steps.dashboardSteps.check_total_rows_companies(page)
##########TODO:дописать с разными провайдерами
    @allure.title("Invite company client connexpay")
    def test_invite_company_client_connexpay(self, page: Page, pages: Pages,
                            steps: Steps, playwright, api_request_context, auth_token):
        email = random_string(4) + '@gmail.com'
        page.goto(DASHBOARD_URL)
        steps.auth.authorize_in_test(page, USER_01.login, USER_01.password, 'Companies')
        pages.team.button_invite.click()
        assert pages.dashboard.title_invite_company.is_visible()
        expect(page.locator('//*[@for="name"]')).to_have_text('Company name')
        expect(page.locator('//*[@placeholder="Traffic Whales"]')).to_be_visible()
        expect(page.locator('//*[@for="email"]')).to_have_text('Owner email')
        expect(page.locator('//*[@placeholder="user@gmail.com"]')).to_be_visible()
        expect(page.locator('//*[@data-test-id="select"]//span[contains(text(), "Card provider")]')).to_be_visible()
        expect(page.locator("(//*[contains(@class, 'display_flex flex-direction_column')])[1]")).to_be_visible()
        expect(page.locator("//span[contains(text(), 'Company type')]")).to_be_visible()
        expect(page.locator("(//*[contains(@class, 'display_flex flex-direction_column')])[2]")).to_be_visible()
        pages.dashboard.input_name_company.fill(random_string(5))
        pages.dashboard.input_emai_company.fill(email)
        sleep(2)
        pages.dashboard.button_invite_company.click()
        sleep(2)
        assert pages.dashboard.button_invite_company.is_not_on_page()

    # придумать проверку отправки запроса
    @allure.title("Invite own company connexpay")
    def test_invite_company_own_connexpay(self, page: Page, pages: Pages,
                                steps: Steps, playwright):
        email = random_string(4) + '@gmail.com'
        page.goto(DASHBOARD_URL)
        steps.auth.authorize_in_test(page, USER_01.login, USER_01.password, 'Companies')
        pages.team.button_invite.click()
        assert pages.dashboard.title_invite_company.is_visible()
        sleep(2)
        pages.dashboard.input_name_company.fill(random_string(5))
        pages.dashboard.input_emai_company.fill(email)
        pages.dashboard.input_company_type.click()
        page.keyboard.press("ArrowDown")
        page.keyboard.press("Enter")
        pages.dashboard.button_invite_company.click()
        sleep(3)
        assert pages.dashboard.button_invite_company.is_not_on_page()

    @allure.title("Sort by issue cards")
    def test_sort_by_issue_cards(self, page: Page, pages: Pages,
                                 steps: Steps, playwright):
        page.goto(DASHBOARD_URL_ETALON_RANGE)
        steps.auth.authorize_in_test(page, USER_01.login, USER_01.password, 'Companies')
        pages.dashboard.first_row_name_company.check_text("168 – red company")
        pages.dashboard.title_table_issue.click()
        steps.dashboardSteps.check_sort_by_issue_first(page)
        pages.dashboard.title_table_issue.click()
        sleep(1.5)
        steps.dashboardSteps.check_sort_by_issue_second(page)

    @allure.title("Sort by transactions")
    def test_sort_by_transactions(self, page: Page, pages: Pages,
                                  steps: Steps, playwright):
        page.goto(DASHBOARD_URL_ETALON_RANGE)
        steps.auth.authorize_in_test(page, USER_01.login, USER_01.password, 'Companies')
        pages.dashboard.first_row_name_company.check_text("168 – red company")
        steps.dashboardSteps.check_text_at_row_companies(page, '2', '13')
        pages.dashboard.title_table_trans.click()
        steps.dashboardSteps.check_text_at_row_companies(page, '2', '13')
        pages.dashboard.title_table_trans.click()
        steps.dashboardSteps.check_text_at_row_companies(page, '2', '0')

    @allure.title("Sort by avg transactions")
    def test_sort_by_avg_transactions(self, page: Page, pages: Pages,
                                      steps: Steps, playwright):
        page.goto(DASHBOARD_URL_ETALON_RANGE)
        steps.auth.authorize_in_test(page, USER_01.login, USER_01.password, 'Companies')
        pages.dashboard.first_row_name_company.check_text("168 – red company")
        steps.dashboardSteps.check_text_at_row_companies(page, '3', '$82.57')
        pages.dashboard.title_table_avg.click()
        pages.dashboard.first_row_name_company.check_text("171 – ruby rose")
        steps.dashboardSteps.check_text_at_row_companies(page, '3', '$141.48')
        pages.dashboard.title_table_avg.click()
        steps.dashboardSteps.check_text_at_row_companies(page, '3', '$0.00')

    @allure.title("Sort by decline rate")
    def test_sort_by_decline_rate(self, page: Page, pages: Pages,
                                   steps: Steps, playwright):
        page.goto(DASHBOARD_URL_ETALON_RANGE)
        steps.auth.authorize_in_test(page, USER_01.login, USER_01.password, 'Companies')
        pages.dashboard.first_row_name_company.check_text("168 – red company")
        steps.dashboardSteps.check_text_at_row_companies(page, '4', '23.1%')
        pages.dashboard.title_table_decline.click()
        pages.dashboard.first_row_name_company.check_text("168 – red company")
        steps.dashboardSteps.check_text_at_row_companies(page, '4', '23.1%')
        pages.dashboard.title_table_decline.click()
        steps.dashboardSteps.check_text_at_row_companies(page, '4', '0.0%')

    @allure.title("Sort by decline sum")
    def test_sort_by_decline_sum(self, page: Page, pages: Pages,
                                  steps: Steps, playwright):
        page.goto(DASHBOARD_URL_ETALON_RANGE)
        steps.auth.authorize_in_test(page, USER_01.login, USER_01.password, 'Companies')
        pages.dashboard.first_row_name_company.check_text("168 – red company")
        steps.dashboardSteps.check_text_at_row_companies(page, '5', '$39.00')
        page.locator("//span[contains(text(), 'Declined')]").click()
        pages.dashboard.first_row_name_company.check_text("168 – red company")
        steps.dashboardSteps.check_text_at_row_companies(page, '5', '$39.00')
        page.locator("//span[contains(text(), 'Declined')]").click()
        steps.dashboardSteps.check_text_at_row_companies(page, '5', '$0.00')

    @allure.title("Sort by international")
    def test_sort_by_international(self, page: Page, pages: Pages,
                                   steps: Steps, playwright):
        page.goto(DASHBOARD_URL_ETALON_RANGE)
        steps.auth.authorize_in_test(page, USER_01.login, USER_01.password, 'Companies')
        pages.dashboard.first_row_name_company.check_text("168 – red company")
        steps.dashboardSteps.check_text_at_row_companies(page, '6', '60.0%')
        pages.dashboard.title_table_international.click()
        pages.dashboard.first_row_name_company.check_text("172 – golden company")
        steps.dashboardSteps.check_text_at_row_companies(page, '6', '75.0%')
        pages.dashboard.title_table_international.click()
        steps.dashboardSteps.check_text_at_row_companies(page, '6', '0.0%')

    @allure.title("Sort by deposits")
    def test_sort_by_deposits(self, page: Page, pages: Pages,
                              steps: Steps, playwright):
        page.goto(DASHBOARD_URL_ETALON_RANGE)
        steps.auth.authorize_in_test(page, USER_01.login, USER_01.password, 'Companies')
        pages.dashboard.first_row_name_company.check_text("168 – red company")
        steps.dashboardSteps.check_text_at_row_companies(page, '7', '$0')
        pages.dashboard.title_table_money_in.click()
        pages.dashboard.first_row_name_company.check_text("8 – test1")
        steps.dashboardSteps.check_text_at_row_companies(page, '7', '$0')

    @allure.title("Sort by spend")
    def test_sort_by_spend(self, page: Page, pages: Pages,
                           steps: Steps, playwright):
        page.goto(DASHBOARD_URL_ETALON_RANGE)
        steps.auth.authorize_in_test(page, USER_01.login, USER_01.password, 'Companies')
        pages.dashboard.first_row_name_company.check_text("168 – red company")
        steps.dashboardSteps.check_text_at_row_companies(page, '8', '($529.96)')
        pages.dashboard.title_table_spend.click()
        steps.dashboardSteps.check_text_at_row_companies(page, '8', '$0.00')

    @allure.title("Filter by status")
    def test_filter_by_status(self, page: Page, pages: Pages,
                           steps: Steps, playwright):
        page.goto(DASHBOARD_URL_ETALON_RANGE)
        steps.auth.authorize_in_test(page, USER_01.login, USER_01.password, 'Companies')
        pages.dashboard.filter_status.click()
        page.locator("//*[@data-test-id='checkbox']//span[contains(text(), 'Active')]").click()
        pages.dashboard.filter_status.click()
        steps.dashboardSteps.check_status_active_companies(page)

    @allure.title("Get info from modal company Active")
    def test_modal_company_active(self, page: Page, pages: Pages, steps: Steps, playwright):
        page.goto(DASHBOARD_COMPANIES_RANGE)
        steps.auth.authorize_in_test(page, USER_01.login, USER_01.password, 'Companies')
        page.locator('//input').fill('55')
        page.locator("//*[contains(text(), '55 – dot not change')]").click()
        sleep(1.5)
        pages.dashboard.status_modal_company.check_text('Active')
        expect(page.locator('//*[@data-test-id="modal-header"]//*[@data-test-id="pip"]')).to_have_css("color", "rgb(111, 198, 87)")
        expect(page.locator('(//*[@data-test-id="modal-dialog"]//p)[1]')).to_have_text('55 – dot not change')
        expect(page.get_by_text('Cards QTY')).to_be_visible()
        assert pages.dashboard.icon_cards_count_edit.is_visible()
        assert pages.dashboard.icon_critical_limit_edit.is_visible()
        expect(page.get_by_text('Critical limit')).to_be_visible()
        expect(page.locator('//*[@data-test-id="modal-dialog"]//span[text()= "50"]')).to_be_visible()
        expect(page.locator('//*[@data-test-id="modal-dialog"]//span[text()= "$100.00"]')).to_be_visible()
        assert pages.dashboard.decline_fe_modal_company.is_visible()
        expect(page.locator("//*[@data-test-id='modal-dialog']//*[contains(@class, 'styles_tile')]//button")).to_have_text('Enable')
        expect(page.locator('//*[@data-test-id="modal-dialog"]//span[contains(text(), "Plan")]')).to_be_visible()
        expect(page.locator("//*[@data-test-id='modal-dialog']//*[contains(text(), 'Change plan')]")).to_be_visible()
        expect(page.locator("//*[@data-test-id='modal-dialog']//*[contains(text(), 'Trial')]")).to_be_visible()
        expect(page.locator("//*[@data-test-id='modal-dialog']//*[contains(text(), '$0.00')]")).to_be_visible()
        expect(page.locator("//*[@data-test-id='progress']")).to_have_css("color", "rgb(20, 21, 26)")
        expect(page.locator("//*[@data-test-id='modal-dialog']//*[contains(@class, 'display_flex flex-direction_column gap_2')]/p")).to_have_text('2% Crypto • 2% Wire • 10 BINs')
        expect(page.locator("//*[@data-test-id='modal-dialog']//*[contains(@class, 'display_flex flex-direction_column gap_2')]/div[2]")).to_have_text('Expire date21 Aug 2024')
        expect(page.locator('//*[@data-test-id="modal-dialog"]//span[contains(text(), "Wallets")]')).to_be_visible()
        expect(page.locator('//*[@data-test-id="modal-dialog"]//span[contains(text(), "Add wallet")]')).to_be_visible()
        page.locator('(//*[@data-test-id="modal-dialog"]//*[@data-test-id="button"])[2]').click()
        expect(page.locator('//*[@data-test-id="modal-dialog"]')).not_to_be_visible()

    @allure.title("Get info from modal company Pending")
    def test_modal_company_pending(self, page: Page, pages: Pages, steps: Steps, playwright, api_request_context):
        page.goto(DASHBOARD_CASH_TODAY)
        steps.auth.authorize_in_test(page, USER_01.login, USER_01.password, 'Cash')
        page.locator('//*[@data-test-id="navigation-section-item"]//span[contains(text(), "Companies")]').click()
        pages.dashboard.filter_status.click()
        page.locator('//*[@data-test-id="checkbox"]//span[text()="Pending"]').click()
        sleep(2)
        page.locator('(//tr)[4]').click()
        pages.dashboard.status_modal_company.check_text('Pending')
        expect(page.get_by_text('Cards QTY')).not_to_be_visible()
        expect(page.get_by_text('Critical limit')).not_to_be_visible()
        expect(page.locator("//*[@data-test-id='modal-dialog']//*[contains(text(), 'Qualify')]")).to_be_visible()
        expect(page.locator("//*[@data-test-id='modal-dialog']//*[contains(text(), 'Delete')]")).to_be_visible()
        expect(page.locator("//*[@data-test-id='modal-dialog']//*[contains(text(), 'Delete')]//ancestor::button")).to_have_css("color", "rgb(255, 255, 255)")
        page.locator("//*[@data-test-id='modal-dialog']//*[contains(text(), 'Delete')]").click()
        expect(page.locator("//*[contains(@class, 'padding-block-start_2')]//h2")).to_have_text('Are you sure you want to delete the company?')
        expect(page.locator("//*[contains(@class, 'padding-block-start_2')]//*[contains(@class, 'display_flex flex-direction_column gap_1 flex_1')]")).to_be_visible()
        expect(page.locator('//*[@data-test-id="button"]//span[contains(text(), "Back")]')).to_be_visible()
        page.locator("//button//span[contains(text(), 'Yes, delete')]").click()
        sleep(1.5)
        expect(page.locator("//*[@data-test-id='modal-dialog']//*[contains(text(), 'Qualify')]")).not_to_be_visible()

    @allure.title("Get info from modal company Disable")
    def test_modal_company_disable(self, page: Page, pages: Pages, steps: Steps, playwright):
        page.goto(DASHBOARD_COMPANIES_RANGE)
        steps.auth.authorize_in_test(page, USER_01.login, USER_01.password, 'Companies')
        page.locator('//input').fill('Winter_time')
        page.locator("//*[contains(text(), '927 – Winter_time')]").click()
        sleep(1.5)
        pages.dashboard.status_modal_company.check_text('Disabled')
        expect(page.locator('(//*[@data-test-id="modal-dialog"]//p)[1]')).to_have_text('927 – Winter_time')
        expect(page.get_by_text('Cards QTY')).to_be_visible()
        sleep(1.5)
        assert pages.dashboard.icon_cards_count_edit.is_not_on_page()
        assert pages.dashboard.icon_critical_limit_edit.is_not_on_page()

    @allure.title("Get info from modal company Restricted")
    def test_modal_company_restricted(self, page: Page, pages: Pages, steps: Steps, playwright):
        page.goto(DASHBOARD_COMPANIES_RANGE)
        steps.auth.authorize_in_test(page, USER_01.login, USER_01.password, 'Companies')
        page.locator('//input').fill('123f')
        page.locator("//*[contains(text(), '39 – 123f')]").click()
        sleep(1.5)
        pages.dashboard.status_modal_company.check_text('Restricted')
        expect(page.locator('(//*[@data-test-id="modal-dialog"]//p)[1]')).to_have_text('39 – 123f')
        expect(page.locator('//*[@data-test-id="modal-header"]//*[@data-test-id="pip"]')).to_have_css("color", "rgb(230, 72, 61)")
        expect(page.get_by_text('Critical limit')).not_to_be_visible()
        expect(page.get_by_text('Critical limit')).not_to_be_visible()
        assert pages.dashboard.decline_fe_modal_company.is_not_on_page()
        expect(page.locator("//*[@data-test-id='modal-dialog']//*[contains(@class, 'styles_tile')]//button")).not_to_be_visible()

    @allure.title("Get wallet from modal company")
    def test_modal_company_get_wallet(self, page: Page, pages: Pages, steps: Steps, playwright):
        page.goto(DASHBOARD_COMPANIES_RANGE)
        steps.auth.authorize_in_test(page, USER_01.login, USER_01.password, 'Companies')
        page.locator('//input').fill('mts')
        page.locator("//*[contains(text(), '1 – MTS')]").click()
        sleep(1.5)
        expect(page.locator('//*[@data-test-id="modal-dialog"]//*[@data-test-id="item-with-pip"]')).to_be_visible()
        expect(page.locator('(//*[@data-test-id="modal-dialog"]//*[contains(@class, "display_flex flex-direction_column")])[3]/span[1]')).to_have_text('USDT TRC-20')
        expect(page.locator('(//*[@data-test-id="modal-dialog"]//*[contains(@class, "display_flex flex-direction_column")])[3]/span[2]')).to_have_text('SomeAddress')
        page.locator('//div[contains(@class, "display_flex flex-direction_column gap_3")]//*[@data-test-id="button-link"]').click()
        pages.cards.toast.check_text('Wallet address copied')
        expect(page.locator('//*[@data-test-id="modal-dialog"]//span[contains(text(), "Add wallet")]')).to_be_visible()

    @allure.title("Add wallet from modal company")
    def test_modal_company_get_wallet(self, page: Page, pages: Pages, steps: Steps, playwright):
        page.goto(DASHBOARD_COMPANIES_RANGE)
        steps.auth.authorize_in_test(page, USER_01.login, USER_01.password, 'Companies')
        page.locator('//input').fill('62')
        page.locator("//*[contains(text(), '62 – апапапрв')]").click()
        sleep(1.5)
        page.locator('//*[@data-test-id="modal-dialog"]//span[contains(text(), "Add wallet")]').click()
        expect(page.locator('(//*[@data-test-id="modal-header"]//h2)[2]')).to_have_text('Create a wallet')
        expect(page.locator("//span[contains(text(), 'USDT TRC-20')]")).to_be_visible()
        expect(page.locator("(//span[contains(text(), 'Tron')])[1]")).to_be_visible()
        expect(page.locator("(//span[contains(text(), 'Ethereum')])[1]")).to_be_visible()
        expect(page.locator("//span[contains(text(), 'USDT ERC-20')]")).to_be_visible()
        page.locator("//span[contains(text(), 'USDT TRC-20')]").click()
        page.locator("//button//span[contains(text(), 'Create')]").click()
        #Дописать проверку если будет

    @allure.title("Add second wallet from modal company")
    def test_modal_company_add_second_wallet(self, page: Page, pages: Pages, steps: Steps, playwright):
        page.goto(DASHBOARD_COMPANIES_RANGE)
        steps.auth.authorize_in_test(page, USER_01.login, USER_01.password, 'Companies')
        page.locator('//input').fill('mts')
        page.locator("//*[contains(text(), '1 – MTS')]").click()
        sleep(1.5)
        page.locator('//*[@data-test-id="modal-dialog"]//span[contains(text(), "Add wallet")]').click()
        expect(page.locator('(//*[@data-test-id="modal-header"]//h2)[2]')).to_have_text('Create a wallet')
        expect(page.locator("//*[@data-test-id='form']//span[contains(text(), 'USDT TRC-20')]")).to_be_visible()
        expect(page.locator("//*[@data-test-id='form']//span[contains(text(), 'USDT ERC-20')]")).to_have_count(1)
        expect(page.locator("(//*[@data-test-id='form']//span[contains(text(), 'Tron')])[1]")).to_be_visible()
        expect(page.locator("(//*[@data-test-id='form']//span[contains(text(), 'Ethereum')])[1]")).to_be_visible()

    @allure.title("Change name company from modal")
    def test_change_name_company_from_modal(self, page: Page, pages: Pages,
                           steps: Steps, playwright):
        page.goto(DASHBOARD_COMPANIES_RANGE)
        steps.auth.authorize_in_test(page, USER_01.login, USER_01.password, 'Companies')
        page.locator('//input').fill('385')
        page.locator("//*[contains(text(), '385 – CfTWI')]").click()
        sleep(1.5)
        expect(page.locator('(//*[@data-test-id="modal-body"]//p)[1]')).to_have_text('385 – CfTWI')
        pages.dashboard.menu_modal_company.click()
        page.locator("//div[contains(text(), 'Edit name')]").click()
        expect(page.locator("(//h2)[2]")).to_have_text('Edit company name')
        expect(page.locator("//span[contains(text(), 'Company name')]")).to_be_visible()
        page.locator('//input[@id="name"]').fill('qwerty')
        pages.dashboard.btn_save_modal.click()
        expect(page.locator('(//*[@data-test-id="modal-body"]//p)[1]')).to_have_text('385 – qwerty')
        pages.dashboard.menu_modal_company.click()
        page.locator("//div[contains(text(), 'Edit name')]").click()
        page.locator('//input[@id="name"]').fill('CfTWI')
        pages.dashboard.btn_save_modal.click()

    @allure.title("Check max.characters when change name company from modal")
    def test_change_name_company_from_modal(self, page: Page, pages: Pages,
                                            steps: Steps, playwright):
        page.goto(DASHBOARD_COMPANIES_RANGE)
        steps.auth.authorize_in_test(page, USER_01.login, USER_01.password, 'Companies')
        page.locator('//input').fill('385')
        page.locator("//*[contains(text(), '385 – CfTWI')]").click()
        sleep(1.5)
        pages.dashboard.menu_modal_company.click()
        page.locator("//div[contains(text(), 'Edit name')]").click()
        page.locator('//input[@id="name"]').fill('CfTWICfTWI CfTWI456 ihiyhyigi h uiy8767jh sKjdfkhfowe8u0483 6 7878')
        pages.dashboard.btn_save_modal.click()
        expect(page.locator("//span[contains(text(), 'String must contain at most 50 character(s)')]")).to_be_visible()

    @allure.title("Disable and activate company from modal")
    def test_disable_and_activate_company_from_modal(self, page: Page, pages: Pages,
                                            steps: Steps, playwright):
        page.goto(DASHBOARD_COMPANIES_RANGE)
        steps.auth.authorize_in_test(page, USER_01.login, USER_01.password, 'Companies')
        page.locator('//input').fill('EQlMct')
        page.locator("//*[contains(text(), '281 – EQlMct')]").click()
        sleep(1.5)
        pages.dashboard.menu_modal_company.click()
        page.locator("//div[contains(text(), 'Disable')]").click()
        expect(page.locator("(//h2)[2]")).to_have_text('Are you sure you want to disable the company?')
        expect(page.locator("//span[contains(text(), '281 – EQlMct')]")).to_be_visible()
        page.locator("//span[contains(text(), 'Yes, disable')]").click()
        sleep(1)
        pages.dashboard.status_modal_company.check_text('Disabled')
        pages.dashboard.menu_modal_company.click()
        page.locator("//div[contains(text(), 'Activate')]").click()
        expect(page.locator('(//h2)[2]')).to_have_text('Select a plan to activate the company')
        pages.dashboard.btn_choose_plan.check_text('Basic')
        pages.dashboard.btn_next_at_modal.click()
        expect(page.locator('(//h2)[2]')).to_have_text('Review details')
        expect(page.locator("//p[contains(text(), 'Basic')]")).to_be_visible()
        expect(page.locator("(//p[contains(text(), '281 – EQlMct')])[2]")).to_be_visible()
        expect(page.locator("(//*[@data-test-id='modal-dialog'])[2]//div[contains(@class, 'justify-content_space-between gap_4')][1]")).to_have_text(' Crypto3%')
        expect(page.locator("(//*[@data-test-id='modal-dialog'])[2]//div[contains(@class, 'justify-content_space-between gap_4')][2]")).to_have_text(' Wire3%')
        expect(page.locator("(//*[@data-test-id='modal-dialog'])[2]//div[contains(@class, 'justify-content_space-between gap_4')][3]")).to_have_text(' BINs3')
        expect(page.locator("(//*[@data-test-id='modal-dialog'])[2]//div[contains(@class, 'justify-content_space-between gap_4')][4]")).to_have_text('Free cards')
        expect(page.locator("(//*[@data-test-id='modal-dialog'])[2]//div[contains(@class, 'justify-content_space-between gap_4')][5]")).to_have_text('Card transfer')
        expect(page.locator("(//*[@data-test-id='modal-dialog'])[2]//div[contains(@class, 'justify-content_space-between gap_4')][6]")).to_have_text('User limits')
        expect(page.locator("(//*[@data-test-id='modal-dialog'])[2]//div[contains(@class, 'justify-content_space-between gap_4')][7]")).to_have_text('International BINs')
        page.locator("//span[contains(text(), 'Confirm')]").click()
        sleep(1)
        pages.dashboard.status_modal_company.check_text('Active')
        page.locator('(//*[@data-test-id="modal-dialog"]//*[@data-slot="icon"])[2]').click()
        page.locator('//*[contains(text(), "Subscriptions")]').click()
        page.locator("//span[contains(text(), '1 Aug – 15 Aug')]").click()
        page.locator("//div[contains(text(), 'All time')]").click()
        page.locator("//span[contains(text(), 'Apply')]").click()
        expect(page.locator('(//*[@title])[1]')).to_have_text('281 – EQlMct')
        steps.universalSteps.check_any_text_at_row_table(page, '3', 'Basic')
        steps.universalSteps.check_any_text_at_row_table(page, '4', 'Unpaid')
        steps.universalSteps.check_any_text_at_row_table(page, '6', '$100.00')
        expect(page.locator("(//button//span[contains(text(), 'Charge')])[1]")).to_be_visible()
        assert pages.dashboard.button_chancel_first.is_visible()

    @allure.title("Restrict disabled company from modal")
    def test_restrict_disabled_company_from_modal(self, page: Page, pages: Pages,
                                                  steps: Steps, playwright, api_request_context):
        name = random_string(8)
        api_create_company(api_request_context, name)
        page.goto(DASHBOARD_COMPANIES_RANGE)
        steps.auth.authorize_in_test(page, USER_01.login, USER_01.password, 'Companies')
        page.locator('//input').fill(name)
        page.locator(f"//*[contains(text(), '{name}')]").click()
        sleep(1.5)
        page.locator("//button//span[contains(text(), 'Qualify')]").click()
        page.locator("//button//span[contains(text(), 'Activate')]").click()
        page.locator("//*[contains(text(), 'Next')]").click()
        page.locator("(//*[contains(text(), 'Activate')])[2]").click()
        sleep(3)
        pages.dashboard.menu_modal_company.click()
        page.locator("//div[contains(text(), 'Disable')]").click()
        page.locator("//button//span[contains(text(), 'Yes, disable')]").click()
        sleep(1)
        pages.dashboard.menu_modal_company.click()
        page.locator("//div[contains(text(), 'Restrict')]").click()
        page.locator("//button//span[contains(text(), 'Yes, restrict')]").click()
        sleep(3)
        pages.dashboard.status_modal_company.check_text("Restricted")

    @allure.title("Restrict active company from modal")
    def test_restrict_active_company_from_modal(self, page: Page, pages: Pages,
                                         steps: Steps, playwright, api_request_context):
        name = random_string(8)
        api_create_company(api_request_context, name)
        page.goto(DASHBOARD_COMPANIES_RANGE)
        steps.auth.authorize_in_test(page, USER_01.login, USER_01.password, 'Companies')
        page.locator('//input').fill(name)
        page.locator(f"//*[contains(text(), '{name}')]").click()
        sleep(1.5)
        page.locator("//button//span[contains(text(), 'Qualify')]").click()
        page.locator("//button//span[contains(text(), 'Activate')]").click()
        page.locator("//*[contains(text(), 'Next')]").click()
        page.locator("(//*[contains(text(), 'Activate')])[2]").click()
        sleep(2)
        pages.dashboard.menu_modal_company.click()
        page.locator("//div[contains(text(), 'Restrict')]").click()
        expect(page.locator('(//h2)[2]')).to_have_text('Are you sure you want to restrict the company?')
        expect(page.locator(f"(//*[contains(text(), '{name}')])[3]")).to_be_visible()
        page.locator("//span[contains(text(), 'Yes, restrict')]").click()
        sleep(2)
        pages.dashboard.status_modal_company.check_text("Restricted")

#TODO: дописать активацию для Qolo ?  и фильтр по провайдеру
#TODO: дописать статус qualified
    @allure.title("Activate pending company from modal")
    def test_activate_pending_company_from_modal(self, page: Page, pages: Pages,steps: Steps, playwright, api_request_context):
        name = random_string(8)
        api_create_company(api_request_context, name)
        page.goto(DASHBOARD_COMPANIES_RANGE)
        steps.auth.authorize_in_test(page, USER_01.login, USER_01.password, 'Companies')
        page.locator('//input').fill(name)
        sleep(1.5)
        page.locator(f"//*[contains(text(), '{name}')]").click()
        page.locator("//button//span[contains(text(), 'Activate')]").click()
        expect(page.locator('(//*[@data-test-id="modal-dialog"]//h2)[2]')).to_have_text('Select a card provider to activate the company')
        expect(page.locator("//*[@data-test-id='select']//div[contains(@class, 'display_flex flex-direction_column')]")).to_have_text('ConnexPay')
        page.locator("//*[@data-test-id='select']//div[contains(@class, 'display_flex flex-direction_column')]").click()
        expect(page.locator("(//*[@data-test-id='row-virtualizer']//button)[1]")).to_have_text('ConnexPay')
        expect(page.locator("(//*[@data-test-id='row-virtualizer']//button)[2]")).to_have_text('Qolo')
        page.locator("(//*[@data-test-id='row-virtualizer']//button)[1]").click()
        page.locator('(//*[@data-test-id="modal-footer"]//*[@data-test-id="button"])[2]').click()
        expect(page.locator('(//*[@data-test-id="modal-dialog"]//h2)[2]')).to_have_text('Review details')
        expect(page.locator("(//*[contains(@class, 'display_flex align-items_center justify-content_space-between gap_4')])[4]")).to_have_text('Card providerConnexPay')
        expect(page.locator("(//*[contains(@class, 'display_flex align-items_center justify-content_space-between gap_4')])[5]")).to_have_text('Cards QTY50')
        expect(page.locator("(//*[contains(@class, 'display_flex align-items_center justify-content_space-between gap_4')])[6]")).to_have_text('Critical limit$100.00')
        expect(page.locator("(//*[contains(@class, 'display_flex align-items_center justify-content_space-between gap_4')])[7]/span[1]")).to_have_text('Decline fee')
        page.locator('//*[@data-test-id="modal-footer"]//*[@data-test-id="button"]/span[contains(text(), "Activate")]').click()
        expect(page.locator('//div[@data-test-id="toast"]')).to_contain_text(f'{name} approved')
        expect(page.locator("//span[contains(text(), 'Plan')]")).to_be_visible()
        expect(page.locator("//span[contains(text(), 'Change plan')]")).to_be_visible()
        expect(page.locator("//span[contains(text(), 'Trial')]")).to_be_visible()
        expect(page.locator("//*[@data-test-id='modal-body']//span[contains(text(), '$0.00')]")).to_be_visible()
        expect(page.locator("(//*[@data-test-id='modal-body']//p)[2]")).to_have_text('2% Crypto • 2% Wire • 9 BINs')
        expect(page.locator("//*[@data-test-id='modal-body']//span[contains(text(), 'Expire date')]")).to_be_visible()
        expect(page.locator("//*[@data-test-id='modal-body']//span[contains(text(), 'Wallets')]")).to_be_visible()
        expect(page.locator("//*[@data-test-id='modal-body']//span[contains(text(), 'Add wallet')]")).to_be_visible()

    @allure.title("Delete pending company from modal")
    def test_delete_pending_company_from_modal(self, page: Page, pages: Pages,
                                               steps: Steps, playwright, api_request_context):
        name = random_string(8)
        api_create_company(api_request_context, name)
        page.goto(DASHBOARD_COMPANIES_RANGE)
        steps.auth.authorize_in_test(page, USER_01.login, USER_01.password, 'Companies')
        page.locator('//input').fill(name)
        sleep(1.5)
        page.locator(f"//*[contains(text(), '{name}')]").click()
        page.locator("//button//span[contains(text(), 'Delete')]").click()
        expect(page.locator('(//h2)[2]')).to_have_text('Are you sure you want to delete the company?')
        page.locator("//button//span[contains(text(), 'Yes, delete')]").click()
        expect(page.locator('//div[@data-test-id="toast"]')).to_contain_text(f'{name} deleted')
        sleep(2)
        assert pages.dashboard.no_results.is_visible()
        assert pages.dashboard.text_change_filter.is_visible()
        assert pages.dashboard.btn_clear_filters.is_visible()

    @allure.title("Change cards quantity company from modal")
    def test_change_cards_quantity_company_from_modal(self, page: Page, pages: Pages,
                                        steps: Steps, playwright):
        page.goto(DASHBOARD_COMPANIES_RANGE)
        steps.auth.authorize_in_test(page, USER_01.login, USER_01.password, 'Companies')
        page.locator('//input').fill('Tesla')
        page.locator("//*[contains(text(), '4 – Tesla')]").click()
        sleep(1.5)
        pages.dashboard.count_limit_cards.check_text('45')
        pages.dashboard.icon_cards_count_edit.click()
        expect(page.locator('(//h2)[2]')).to_have_text('Edit cards quantity')
        expect(page.locator('//input[@id="cards_quantity_limit"]')).to_have_value('45')
        pages.dashboard.input_cards_quantity_limit.fill('50')
        pages.dashboard.btn_save_modal.click()
        pages.dashboard.count_limit_cards.check_text('50')
        pages.dashboard.icon_cards_count_edit.click()
        pages.dashboard.input_cards_quantity_limit.fill('45')
        pages.dashboard.btn_save_modal.click()
        sleep(1)
        pages.dashboard.count_limit_cards.check_text('45')

    @allure.title("Change cards quantity=0 company from modal")
    def test_change_cards_quantity_0_company_from_modal(self, page: Page, pages: Pages,
                                                      steps: Steps, playwright):
        page.goto(DASHBOARD_COMPANIES_RANGE)
        steps.auth.authorize_in_test(page, USER_01.login, USER_01.password, 'Companies')
        page.locator('//input').fill('Tesla')
        page.locator("//*[contains(text(), '4 – Tesla')]").click()
        sleep(1.5)
        pages.dashboard.icon_cards_count_edit.click()
        expect(page.locator('(//h2)[2]')).to_have_text('Edit cards quantity')
        pages.dashboard.input_cards_quantity_limit.fill('0')
        pages.dashboard.btn_save_modal.click()
        assert pages.dashboard.toast_natural_number.is_visible()
        pages.dashboard.button_chancel_first.click()
        pages.dashboard.icon_cards_count_edit.click()
        pages.dashboard.input_cards_quantity_limit.fill('-50')
        pages.dashboard.btn_save_modal.click()
        assert pages.dashboard.toast_natural_number.is_visible()

    @allure.title("Change critical limit company from modal")
    def test_change_critical_limit_company_from_modal(self, page: Page, pages: Pages,
                                                      steps: Steps, playwright):
        page.goto(DASHBOARD_COMPANIES_RANGE)
        steps.auth.authorize_in_test(page, USER_01.login, USER_01.password, 'Companies')
        page.locator('//input').fill('Tesla')
        page.locator("//*[contains(text(), '4 – Tesla')]").click()
        sleep(1.5)
        pages.dashboard.sum_critical_limit.check_text('$2,500.00')
        pages.dashboard.icon_critical_limit_edit.click()
        expect(page.locator('(//h2)[2]')).to_have_text('Edit critical limit')
        expect(page.locator('//input[@id="critical_balance"]')).to_have_value('2500')
        pages.dashboard.input_critical_balance.fill('5000')
        pages.dashboard.btn_save_modal.click()
        pages.dashboard.sum_critical_limit.check_text('$5,000.00')
        pages.dashboard.icon_critical_limit_edit.click()
        pages.dashboard.input_critical_balance.fill('2500')
        pages.dashboard.btn_save_modal.click()
        pages.dashboard.sum_critical_limit.check_text('$2,500.00')

    @allure.title("Change critical limit = 0 company from modal")
    def test_change_critical_limit_0_company_from_modal(self, page: Page, pages: Pages,
                                                      steps: Steps, playwright):
        page.goto(DASHBOARD_COMPANIES_RANGE)
        steps.auth.authorize_in_test(page, USER_01.login, USER_01.password, 'Companies')
        page.locator('//input').fill('Tesla')
        page.locator("//*[contains(text(), '4 – Tesla')]").click()
        sleep(1.5)
        pages.dashboard.sum_critical_limit.check_text('$2,500.00')
        pages.dashboard.icon_critical_limit_edit.click()
        expect(page.locator('(//h2)[2]')).to_have_text('Edit critical limit')
        expect(page.locator('//input[@id="critical_balance"]')).to_have_value('2500')
        pages.dashboard.input_critical_balance.fill('0')
        pages.dashboard.btn_save_modal.click()
        assert pages.dashboard.toast_natural_number.is_visible()
        pages.dashboard.button_chancel_first.click()
        pages.dashboard.icon_critical_limit_edit.click()
        pages.dashboard.input_critical_balance.fill('-5')
        pages.dashboard.btn_save_modal.click()
        assert pages.dashboard.toast_natural_number.is_visible()

    @allure.title("Change decline fee company from modal")
    def test_change_decline_fee_company_from_modal(self, page: Page, pages: Pages,
                                                      steps: Steps, playwright):
        page.goto(DASHBOARD_COMPANIES_RANGE)
        steps.auth.authorize_in_test(page, USER_01.login, USER_01.password, 'Companies')
        page.locator('//input').fill('MTS')
        page.locator("//*[contains(text(), '1 – MTS')]").click()
        sleep(1.5)
        expect(page.locator("//div//span[contains(text(), 'Decline fee')]/following-sibling::button")).to_have_text('Disable')
        page.locator("//div//span[contains(text(), 'Decline fee')]/following-sibling::button").click()
        sleep(1.5)
        expect(page.locator("//div//span[contains(text(), 'Decline fee')]/following-sibling::button")).to_have_text('Enable')
        page.locator("//div//span[contains(text(), 'Decline fee')]/following-sibling::button").click()
        expect(page.locator("//div//span[contains(text(), 'Decline fee')]/following-sibling::button")).to_have_text('Disable')

    @allure.title("Can not change plan company from modal")
    def test_can_not_change_plan_company_from_modal(self, page: Page, pages: Pages,
                                                      steps: Steps, playwright):
        page.goto(DASHBOARD_COMPANIES_RANGE)
        steps.auth.authorize_in_test(page, USER_01.login, USER_01.password, 'Companies')
        page.locator('//input').fill('mts')
        page.locator("//*[contains(text(), '1 – MTS')]").click()
        sleep(1.5)
        pages.dashboard.btn_change_plan.click()
        sleep(1)
        pages.dashboard.btn_choose_plan.click()
        page.locator('//*[@data-index="1"]').click()
        pages.dashboard.btn_next_at_modal.click()
        expect(page.locator('//*[@data-test-id="toast"]')).to_have_text('You can only change your subscription plan once per billing period. Please try again later or contact support for assistance.')

