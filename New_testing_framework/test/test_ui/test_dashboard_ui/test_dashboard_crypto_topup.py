import allure
import pytest
from playwright.sync_api import Page, expect
from data.input_data.users import USER_01
from pages.pages import Pages
from steps import Steps
from utils.consts import DASHBOARD_TOPUP_RANGE
from time import sleep


class TestDashboardCryptoTopup:
    @allure.title("Check page top up")
    def test_check_page_top_up(self, page: Page, pages: Pages, steps: Steps, playwright):
        page.goto(DASHBOARD_TOPUP_RANGE)
        steps.auth.authorize_in_test(page, USER_01.login, USER_01.password, 'Crypto topup')
        expect(page.locator('//*[@placeholder="Company or batch ID"]')).to_be_visible()
        expect(page.locator('//*[@data-test-id="button"]//span[contains(text(), "Company")]')).to_be_visible()
        expect(page.locator('//*[@data-test-id="button"]//span[contains(text(), "Cash status")]')).to_be_visible()
        expect(page.locator('//*[@data-test-id="button"]//span[contains(text(), "Client status")]')).to_be_visible()
        expect(page.locator('//*[@data-test-id="button"]//span[contains(text(), "Batch")]')).to_be_visible()
        expect(page.locator('//*[@data-test-id="button"]//span[contains(text(), "Token")]')).to_be_visible()
        expect(page.locator('//span[contains(text(), "All time")]')).to_be_visible()
        assert pages.dashboard.checkbox_choose.is_visible()
        steps.universalSteps.check_titles_at_table(page, '2', 'Datetime')
        steps.universalSteps.check_titles_at_table(page, '3', 'Company')
        steps.universalSteps.check_titles_at_table(page, '4', 'Client status')
        steps.universalSteps.check_titles_at_table(page, '5', 'Cash status')
        steps.universalSteps.check_titles_at_table(page, '6', 'Batch')
        steps.universalSteps.check_titles_at_table(page, '7', 'Token')
        steps.universalSteps.check_titles_at_table(page, '8', 'Total amount')
        steps.universalSteps.check_titles_at_table(page, '9', 'Fee')
        steps.universalSteps.check_titles_at_table(page, '14', '$2,755.00')
        steps.universalSteps.check_titles_at_table(page, '15', '$219.00')
        pages.dashboard.table_pagination.check_text('4 top-ups')

    @pytest.mark.skip("")
    @allure.title("Select all checkboxes")
    def test_select_all_checkboxes(self, page: Page, pages: Pages, steps: Steps, playwright):
        page.goto(DASHBOARD_TOPUP_RANGE)
        steps.auth.authorize_in_test(page, USER_01.login, USER_01.password, 'Crypto topup')
        sleep(2)
        pages.dashboard.checkbox_choose.click()
        assert pages.dashboard.new_batch_modal.is_visible()
        expect(page.locator("//th[contains(text(), '3 selected')]")).to_be_visible()
        pages.dashboard.checkbox_choose.click()
        expect(page.locator("//th[contains(text(), '3 selected')]")).not_to_be_visible()

    @pytest.mark.skip("")
    @allure.title("Select any checkboxes")
    def test_select_any_checkboxes(self, page: Page, pages: Pages, steps: Steps, playwright):
        page.goto(DASHBOARD_TOPUP_RANGE)
        steps.auth.authorize_in_test(page, USER_01.login, USER_01.password, 'Crypto topup')
        expect(page.locator("//th[contains(text(), 'selected')]")).not_to_be_visible()
        steps.universalSteps.check_titles_at_table(page, '14', '$2,755.00')
        steps.universalSteps.check_titles_at_table(page, '15', '$219.00')
        page.locator('(//*[@data-test-id="checkbox"])[2]').click()
        page.locator('(//*[@data-test-id="checkbox"])[3]').click()
        expect(page.locator("//th[contains(text(), '2 selected')]")).to_be_visible()
        steps.universalSteps.check_titles_at_table(page, '14', '$255.00')
        steps.universalSteps.check_titles_at_table(page, '15', '$9.00')
        pages.dashboard.checkbox_choose.click()
        expect(page.locator("//th[contains(text(), '2 selected')]")).not_to_be_visible()
        steps.universalSteps.check_titles_at_table(page, '14', '$2,755.00')
        steps.universalSteps.check_titles_at_table(page, '15', '$219.00')

    @pytest.mark.skip("")
    @allure.title("Check selected checkboxes for treasure & USDT (TRC-20)")
    def test_check_selected_checkboxes_for_treasure_and_token(self, page: Page, pages: Pages, steps: Steps, playwright):
        page.goto(DASHBOARD_TOPUP_RANGE)
        steps.auth.authorize_in_test(page, USER_01.login, USER_01.password, 'Crypto topup')
        pages.dashboard.tab_processed.click()
        page.locator('(//*[@data-test-id="checkbox"])[7]').click()
        page.locator('(//*[@data-test-id="checkbox"])[9]').click()
        sleep(2)
        assert pages.dashboard.new_batch_modal.is_visible()
        expect(page.locator('//*[@data-test-id="button"]//span[contains(text(), "Loan")]')).to_be_visible()
        expect(page.locator('//*[@data-test-id="button"]//span[contains(text(), "Netting")]')).to_be_visible()
        page.locator('(//*[@data-test-id="checkbox"])[2]').click()
        assert pages.dashboard.new_batch_modal.is_not_on_page()

    @pytest.mark.skip("")
    @allure.title("Check batch")
    def test_create_batch(self, page: Page, pages: Pages, steps: Steps, playwright):
        page.goto(DASHBOARD_TOPUP_RANGE)
        steps.auth.authorize_in_test(page, USER_01.login, USER_01.password, 'Crypto topup')
        page.locator('(//*[@data-test-id="checkbox"])[2]').click()
        pages.dashboard.new_batch_modal.click()
        expect(page.locator('//*[@data-test-id="modal-dialog"]//h2')).to_have_text('New batch')
        expect(page.locator("//div[contains(@class, 'display_flex flex-direction_column gap_5')]/span")).to_have_text('55.00')
        expect(page.locator("//div[contains(@class, 'display_flex flex-direction_column gap_5')]//label")).to_have_text('Send to')
        expect(page.locator("//div[contains(@class, 'display_flex flex-direction_column gap_3')]/span[1]")).to_have_text('Token and network')
        expect(page.locator("//div[contains(@class, 'display_flex flex-direction_column gap_3')]/span[2]")).to_have_text('USDT (TRC-20)')
        page.locator("//button//span[contains(text(), 'Next')]").click()
        expect(page.locator("//span[contains(text(), 'Must be a natural number')]")).to_be_visible()

    @pytest.mark.skip("")
    @allure.title("Check loan")
    def test_create_loan(self, page: Page, pages: Pages, steps: Steps, playwright):
        page.goto(DASHBOARD_TOPUP_RANGE)
        steps.auth.authorize_in_test(page, USER_01.login, USER_01.password, 'Crypto topup')
        page.locator('(//*[@data-test-id="checkbox"])[2]').click()
        page.locator('//*[@data-test-id="button"]//span[contains(text(), "Loan")]').click()
        expect(page.locator('//*[@data-test-id="modal-dialog"]//h2')).to_have_text('New loan')
        expect(page.locator("//div[contains(@class, 'display_flex flex-direction_column gap_2')]/span[1]")).to_have_text("55.00")
        expect(page.locator("//div[contains(@class, 'display_flex flex-direction_column gap_2')]/span[2]")).to_have_text('to expense vault')
        expect(page.locator("//div[contains(@class, 'display_flex flex-direction_column gap_3')]/span[1]")).to_have_text('Token and network')
        expect(page.locator("//div[contains(@class, 'display_flex flex-direction_column gap_3')]/span[2]")).to_have_text('USDT (TRC-20)')
        expect(page.locator("//button//span[contains(text(), 'Create loan')]")).to_be_visible()

    @pytest.mark.skip("")
    @allure.title("Check create netting")
    def test_create_netting(self, page: Page, pages: Pages, steps: Steps, playwright):
        page.goto(DASHBOARD_TOPUP_RANGE)
        steps.auth.authorize_in_test(page, USER_01.login, USER_01.password, 'Crypto topup')
        page.locator('(//*[@data-test-id="checkbox"])[1]').click()
        page.locator('//*[@data-test-id="button"]//span[contains(text(), "Netting")]').click()
        expect(page.locator('//*[@data-test-id="modal-dialog"]//h2')).to_have_text('New netting')
        expect(page.locator("//div[contains(@class, 'display_flex flex-direction_column gap_2')]/span[1]")).to_have_text('755.00')
        expect(page.locator("//div[contains(@class, 'display_flex flex-direction_column gap_2')]/span[2]")).to_have_text('to expense vault')
        expect(page.locator("//div[contains(@class, 'display_flex flex-direction_column gap_3')]/span[1]")).to_have_text('Token and network')
        expect(page.locator("//div[contains(@class, 'display_flex flex-direction_column gap_3')]/span[2]")).to_have_text('USDT (TRC-20)')
        expect(page.locator("//button//span[contains(text(), 'Create netting')]")).to_be_visible()

    @pytest.mark.skip("")
    @allure.title("Check Issue credit")
    def test_check_issue_credit(self, page: Page, pages: Pages, steps: Steps, playwright):
        page.goto(DASHBOARD_TOPUP_RANGE)
        steps.auth.authorize_in_test(page, USER_01.login, USER_01.password, 'Crypto topup')
        pages.dashboard.tab_processed.click()
        page.locator("(//button//span[contains(text(), 'Issue credit')])[1]").click()
        expect(page.locator('//*[@data-test-id="modal-dialog"]//h2')).to_have_text('Issue credit')
        expect(page.locator("//span[contains(@class, 'styles_containerHeading3xl')]")).to_have_text('$1,500.00')
        expect(page.locator("//div//span[contains(text(), 'From')]")).to_be_visible()
        expect(page.locator('(//div[contains(@class, "display_flex align-items_center gap_3")]//div[@data-test-id="avatar"])[1]')).to_be_visible()
        expect(page.locator('(//div[contains(@class, "display_flex align-items_center gap_3")]//div[@data-test-id="avatar"])[2]')).to_be_visible()
        expect(page.locator("(//div[contains(@class, 'display_flex align-items_center gap_3')]//span[contains(@class, 'styles_container')])[1]")).to_have_text('Credit â€“ ConnexPay')
        expect(page.locator("(//div[contains(@class, 'display_flex align-items_center gap_3')]//span[contains(@class, 'styles_container')])[2]")).to_be_visible()
        expect(page.locator("(//div[contains(@class, 'display_flex align-items_center gap_3')]//span[contains(@class, 'styles_container')])[3]")).to_have_text('1 â€“ MTS')
        expect(page.locator("(//div[contains(@class, 'display_flex align-items_center gap_3')]//span[contains(@class, 'styles_container')])[4]")).to_have_text('4')
        expect(page.locator("(//div[contains(@class, 'display_flex align-items_center gap_3')]//span[contains(@class, 'styles_container')])[5]")).to_be_visible()
        expect(page.locator("(//div[contains(@class, 'display_flex flex-direction_column gap_3')]//span)[5]")).to_have_text('To')
        expect(page.locator("//*[@data-test-id='modal-footer']//span[contains(text(), 'Cancel')]")).to_be_visible()
        expect(page.locator("//*[@data-test-id='modal-footer']//span[contains(text(), 'Make Top-up')]")).to_be_visible()

    @pytest.mark.skip("")
    @allure.title("Check clear credit")
    def test_check_clear_credit(self, page: Page, pages: Pages, steps: Steps, playwright):
        page.goto(DASHBOARD_TOPUP_RANGE)
        steps.auth.authorize_in_test(page, USER_01.login, USER_01.password, 'Crypto topup')
        page.locator("(//button//span[contains(text(), 'Clear credit')])[1]").click()
        expect(page.locator('//*[@data-test-id="modal-dialog"]//h2')).to_have_text('Clear credit')
        expect(page.locator('//*[@data-test-id="modal-body"]')).to_have_text('$55.00')
        expect(page.locator("//*[@data-test-id='modal-footer']//span[contains(text(), 'Cancel')]")).to_be_visible()
        expect(page.locator("//*[@data-test-id='modal-footer']//span[contains(text(), 'Clear credit')]")).to_be_visible()

    @pytest.mark.skip("")
    @allure.title("Check hover data and time")
    def test_check_hover_data_time(self, page: Page, pages: Pages, steps: Steps, playwright):
        page.goto(DASHBOARD_TOPUP_RANGE)
        steps.auth.authorize_in_test(page, USER_01.login, USER_01.password, 'Crypto topup')
        page.locator('(//*[@data-test-id="date-popover"])[1]').hover()
        page.locator('(//*[@data-test-id="date-popover"]//*[@data-test-id="popper-activator"])[1]').hover()
        expect(page.locator('//*[@data-test-id="tooltip-content"]')).to_have_text("23 Aug, 05:45 (UTC+00:00)")

    @pytest.mark.skip("")
    @allure.title("Check some rows")
    def test_check_some_rows(self, page: Page, pages: Pages, steps: Steps, playwright):
        page.goto(DASHBOARD_TOPUP_RANGE)
        steps.auth.authorize_in_test(page, USER_01.login, USER_01.password, 'Crypto topup')
        pages.dashboard.tab_processed.click()
        steps.dashboardSteps.check_companies_referrals(page, '9', '1 â€“ MTS')
        steps.dashboardSteps.check_status_in_row(page, '5', 'Top-up from credit')
        steps.dashboardSteps.check_status_in_row(page, '6', 'Deposit')
        steps.universalSteps.check_any_text_at_row_table(page, '40', 'USDT (TRC-20)')
        steps.universalSteps.check_any_text_at_row_table(page, '41', '$1,300.00')
        steps.universalSteps.check_any_text_at_row_table(page, '42', '$45.00')
        steps.universalSteps.check_any_text_at_row_table(page, '44', 'Clear credit')
        steps.dashboardSteps.check_companies_referrals(page, '11', '4 â€“ Tesla')
        steps.dashboardSteps.check_status_in_row(page, '9', 'Top-up from credit')
        steps.dashboardSteps.check_status_in_row(page, '10', 'Deposit')

    @allure.title("Search by company")
    def test_search_by_company(self, page: Page, pages: Pages, steps: Steps, playwright):
        page.goto(DASHBOARD_TOPUP_RANGE)
        steps.auth.authorize_in_test(page, USER_01.login, USER_01.password, 'Crypto topup')
        page.locator('//input[@placeholder="Company or batch ID"]').fill('Bee')
        pages.dashboard.table_pagination.check_text('1 top-up')
        expect(page.locator("(//td//div[contains(@class, 'display_flex align-items_center gap_2')])[2]")).to_have_text('2 â€“ Beeline')

    @allure.title("Filter by company")
    def test_filter_by_company(self, page: Page, pages: Pages, steps: Steps, playwright):
        page.goto(DASHBOARD_TOPUP_RANGE)
        steps.auth.authorize_in_test(page, USER_01.login, USER_01.password, 'Crypto topup')
        pages.dashboard.tab_processed.click()
        page.locator("//button//span[contains(text(), 'Company')]").click()
        page.locator('(//*[@data-test-id="text-field"])[2]//input').fill("tesl")
        page.locator("//label//span[contains(text(), '4 â€“ Tesla')]").click()
        page.locator('//*[@data-test-id="text-field"]//*[@data-test-id="button-link"]').click()
        pages.dashboard.table_pagination.check_text('1 top-up')
        expect(page.locator("(//td//div[contains(@class, 'display_flex align-items_center gap_2')])[2]")).to_have_text('4 â€“ Tesla')

    @allure.title("Filter by cash status")
    def test_filter_by_cash_status(self, page: Page, pages: Pages, steps: Steps, playwright):
        page.goto(DASHBOARD_TOPUP_RANGE)
        steps.auth.authorize_in_test(page, USER_01.login, USER_01.password, 'Crypto topup')
        pages.dashboard.tab_processed.click()
        page.locator("//button//span[contains(text(), 'Cash status')]").click()
        steps.dashboardSteps.check_filters_top_ups(page, 'Deposit')
        steps.dashboardSteps.check_filters_top_ups(page, 'Treasury')
        steps.dashboardSteps.check_filters_top_ups(page, 'Expense')
        steps.dashboardSteps.check_filters_top_ups(page, 'Gas')
        steps.dashboardSteps.check_filters_top_ups(page, 'Swap')
        steps.dashboardSteps.check_filters_top_ups(page, 'Offramp')
        steps.dashboardSteps.check_filters_top_ups(page, 'Bank account')
        steps.dashboardSteps.check_filters_top_ups(page, 'Master account')
        steps.dashboardSteps.check_filters_top_ups(page, 'Trash')
        steps.dashboardSteps.check_filters_top_ups(page, 'Transit')
        page.locator('//*[@data-test-id="checkbox"]//span[contains(text(), "Treasury")]').click()
        pages.dashboard.table_pagination.check_text('6 top-ups')
        expect(page.locator("(//td//div[contains(@class, 'display_flex align-items_center gap_2')])[2]")).to_have_text('1 â€“ MTS')
        expect(page.locator("(//td//div[contains(@class, 'display_flex align-items_center gap_2')])[6]")).to_have_text("2 â€“ Beeline")
        expect(page.locator("(//td//div[contains(@class, 'display_flex align-items_center gap_2')])[10]")).to_have_text('6 â€“ ConnCompany')

    @allure.title("Filter by client status")
    def test_filter_by_client_status(self, page: Page, pages: Pages, steps: Steps, playwright):
        page.goto(DASHBOARD_TOPUP_RANGE)
        steps.auth.authorize_in_test(page, USER_01.login, USER_01.password, 'Crypto topup')
        page.locator("//button//span[contains(text(), 'Client status')]").click()
        steps.dashboardSteps.check_filters_top_ups(page, 'Deposit Done')
        steps.dashboardSteps.check_filters_top_ups(page, 'Top-up from credit')
        steps.dashboardSteps.check_filters_top_ups(page, 'On the way')
        steps.dashboardSteps.check_filters_top_ups(page, 'Top-up done')
        page.locator('//*[@data-test-id="checkbox"]//span[contains(text(), "Top-up from credit")]').click()
        pages.dashboard.table_pagination.check_text('4 top-ups')
        expect(page.locator("(//td//div[contains(@class, 'display_flex align-items_center gap_2')])[2]")).to_have_text('2 â€“ Beeline')
        expect(page.locator("(//td//div[contains(@class, 'display_flex align-items_center gap_2')])[4]")).to_have_text('6 â€“ ConnCompany')

    @allure.title("Filter by batch")
    def test_filter_by_batch(self, page: Page, pages: Pages, steps: Steps, playwright):
        page.goto(DASHBOARD_TOPUP_RANGE)
        steps.auth.authorize_in_test(page, USER_01.login, USER_01.password, 'Crypto topup')
        pages.dashboard.tab_processed.click()
        page.locator("//button//span[contains(text(), 'Batch')]").click()
        page.locator('//*[@data-test-id="checkbox"]//span[contains(text(), "4")]').click()
        expect(page.locator('//*[@data-test-id="tag"]/div[contains(text(), "4")]')).to_be_visible()
        expect(page.locator('(//td//*[contains(@class, "display_flex align-items_center gap_2")])[2]')).to_have_text('1 â€“ MTS')

    @allure.title("Filter by token")
    def test_filter_by_token(self, page: Page, pages: Pages, steps: Steps, playwright):
        page.goto(DASHBOARD_TOPUP_RANGE)
        steps.auth.authorize_in_test(page, USER_01.login, USER_01.password, 'Crypto topup')
        pages.dashboard.tab_processed.click()
        page.locator("//button//span[contains(text(), 'Token')]").click()
        page.locator("//div//span[contains(text(), 'USDT (TRC-20)')]").click()
        expect(page.locator('//*[@data-test-id="tag"]/div[contains(text(), "USDT (TRC-20)")]')).to_be_visible()
        steps.dashboardSteps.check_companies_referrals(page, '21', '6 â€“ ConnCompany')
        steps.dashboardSteps.check_companies_referrals(page, '5', '37 â€“ SeventhReferee')
        pages.dashboard.table_pagination.check_text('14 top-ups')

    @allure.title("Filter by card provider")
    def test_filter_by_card_provider(self, page: Page, pages: Pages, steps: Steps, playwright):
        page.goto(DASHBOARD_TOPUP_RANGE)
        steps.auth.authorize_in_test(page, USER_01.login, USER_01.password, 'Crypto topup')
        pages.dashboard.tab_processed.click()
        page.locator('//*[@data-test-id="button"]//span[contains(text(), "Card provider")]').click()
        page.locator('//*[@data-test-id="checkbox"]//span[contains(text(), "ConnexPay")]').click()
        pages.dashboard.table_pagination.check_text('17 top-ups')

    @allure.title("Check widgets")
    def test_check_widgets(self, page: Page, pages: Pages, steps: Steps, playwright):
        page.goto(DASHBOARD_TOPUP_RANGE)
        steps.auth.authorize_in_test(page, USER_01.login, USER_01.password, 'Crypto topup')
        expect(page.locator("//span[contains(text(), 'Gas station')]")).to_be_visible()
        expect(page.locator("(//div[contains(@class, 'styles_icon')])[1]")).to_be_visible()
        expect(page.locator("(//div[contains(@class, 'styles_icon')])[1]/following-sibling::span")).to_be_visible()
        expect(page.locator("(//div[contains(@class, 'styles_icon')])[2]/following-sibling::span")).to_be_visible()
        expect(page.locator("(//div[contains(@class, 'styles_icon')])[2]")).to_be_visible()

        expect(page.locator("//span[contains(text(), 'Rate')]")).to_be_visible()
        expect(page.locator("(//div[contains(@class, 'styles_icon')])[3]")).to_be_visible()
        expect(page.locator("(//div[contains(@class, 'styles_icon')])[3]/following-sibling::span")).to_be_visible()
        expect(page.locator("(//div[contains(@class, 'styles_icon')])[4]")).to_be_visible()
        expect(page.locator("(//div[contains(@class, 'styles_icon')])[4]/following-sibling::span")).to_be_visible()
        steps.dashboardSteps.check_text_widgets_top_ups(page, '1', '1', 'Treasury USDT TRC')
        steps.dashboardSteps.check_text_widgets_top_ups(page, '1', '2', '$2,755.00')

        steps.dashboardSteps.check_text_widgets_top_ups(page, '2', '1', 'Treasury USDT ERC')
        steps.dashboardSteps.check_text_widgets_top_ups(page, '2', '2', '$1,500.00')

        steps.dashboardSteps.check_text_widgets_top_ups(page, '3', '1', 'Treasury USDC ERC')
        steps.dashboardSteps.check_text_widgets_top_ups(page, '3', '2', '$435.45')

        steps.dashboardSteps.check_text_widgets_top_ups(page, '4', '1', 'Expense')
        steps.dashboardSteps.check_text_widgets_top_ups(page, '4', '2', '$8.85')

        expect(page.locator("//*[contains(text(), 'ConnexPay')]/ancestor::button//div[2]")).to_have_text('6')
        expect(page.locator("//*[contains(text(), 'Qolo')]")).to_be_visible()
        expect(page.locator('//*[@data-test-id="tab"]//*[contains(text(), "All")]')).to_be_visible()

        expect(page.locator("//*[@data-test-id='tab']//div[contains(text(), 'USDT TRC')]")).to_be_visible()
        expect(page.locator("//div[contains(text(), 'USDT TRC')]/ancestor::button[@data-test-id='tab']//following-sibling::div")).to_have_text('4')

        assert pages.dashboard.tab_usdt_erc.is_visible()
        expect(page.locator("//div[contains(text(), 'USDT ERC')]/ancestor::button[@data-test-id='tab']//following-sibling::div")).to_have_text('1')

        assert pages.dashboard.tab_usdc_erc.is_visible()
        expect(page.locator("//div[contains(text(), 'USDC ERC')]/ancestor::button[@data-test-id='tab']//following-sibling::div")).to_have_text('1')

        assert pages.dashboard.tab_deposits.is_visible()
        expect(page.locator("//div[contains(text(), 'Deposits')]/ancestor::button[@data-test-id='tab']//following-sibling::div")).to_have_text('8')
        pages.dashboard.tab_processed.click()


    @pytest.mark.skip("")
    @allure.title("Check tab USDC ERC + ConnexPay")
    def test_check_tab_usdc_erc_connex_pay(self, page: Page, pages: Pages, steps: Steps, playwright):
        page.goto(DASHBOARD_TOPUP_RANGE)
        steps.auth.authorize_in_test(page, USER_01.login, USER_01.password, 'Crypto topup')
        pages.dashboard.tab_connex_pay.click()
        pages.dashboard.tab_usdc_erc.click()
        pages.dashboard.tag.check_text('Treasury')
        pages.dashboard.tag_2.check_text('USDC (ERC-20)')
        pages.dashboard.tag_3.check_text('ConnexPay')
        sleep(2)
        pages.dashboard.table_pagination.check_text('1 top-up')
        steps.universalSteps.check_any_text_at_row_table(page, '7', 'USDC (ERC-20)')

    @pytest.mark.skip("")
    @allure.title("Check tab Deposits + tab ConnexPay")
    def test_check_tab_deposits_connex_pay(self, page: Page, pages: Pages, steps: Steps, playwright):
        page.goto(DASHBOARD_TOPUP_RANGE)
        steps.auth.authorize_in_test(page, USER_01.login, USER_01.password, 'Crypto topup')
        pages.dashboard.tab_connex_pay.click()
        pages.dashboard.tab_deposits.click()
        pages.dashboard.tag.check_text('Deposit')
        pages.dashboard.tag_2.check_text('ConnexPay')
        pages.dashboard.table_pagination.check_text('6 top-ups')
        steps.universalSteps.check_any_text_at_row_table(page, '3', '2 â€“ Beeline')
        steps.universalSteps.check_any_text_at_row_table(page, '4', 'Top-up from credit')

    @pytest.mark.skip("")
    @allure.title("Check tab USDT TRC + ConnexPay")
    def test_check_tab_usdt_trc_connex_pay(self, page: Page, pages: Pages, steps: Steps, playwright):
        page.goto(DASHBOARD_TOPUP_RANGE)
        steps.auth.authorize_in_test(page, USER_01.login, USER_01.password, 'Crypto topup')
        pages.dashboard.tag.check_text('Treasury')
        pages.dashboard.tag_2.check_text('USDT (TRC-20)')
        pages.dashboard.tag_3.check_text('ConnexPay')
        expect(page.locator('(//*[@data-test-id="item-with-pip"])[1]')).to_be_visible()
        expect(page.locator('(//*[@data-test-id="pip"])[1]')).to_have_css("color", "rgb(102, 51, 255)")
        steps.dashboardSteps.check_status_in_row(page, '1', 'Top-up from credit')
        steps.dashboardSteps.check_status_in_row(page, '2', 'Treasury')
        steps.dashboardSteps.check_text_in_row_top_ups(page, '$5.00', '6', "USDT (TRC-20)")
        steps.dashboardSteps.check_text_in_row_top_ups(page, '$5.00', '2', "2 â€“ Beeline")
        steps.dashboardSteps.check_text_in_row_top_ups(page, '$5.00', '9', "ConnexPay")
        steps.dashboardSteps.check_text_in_row_top_ups(page, '$5.00', '10', "Clear credit")
        pages.dashboard.table_pagination.check_text('4 top-ups')

    @pytest.mark.skip("")
    @allure.title("Check tab USDT ERC + ConnexPay")
    def test_check_tab_usdt_erc_connex_pay(self, page: Page, pages: Pages, steps: Steps, playwright):
        page.goto(DASHBOARD_TOPUP_RANGE)
        steps.auth.authorize_in_test(page, USER_01.login, USER_01.password, 'Crypto topup')
        pages.dashboard.tab_usdt_erc.click()
        pages.dashboard.tag.check_text('Treasury')
        pages.dashboard.tag_2.check_text('USDT (ERC-20)')
        pages.dashboard.tag_3.check_text('ConnexPay')
        pages.dashboard.table_pagination.check_text('1 top-up')
        steps.dashboardSteps.check_text_in_row_top_ups(page, '$30.00', '2', "1 â€“ MTS")
        steps.dashboardSteps.check_text_in_row_top_ups(page, '$30.00', '6', "USDT (ERC-20)")
        steps.dashboardSteps.check_text_in_row_top_ups(page, '$30.00', '9', "ConnexPay")

    @pytest.mark.skip("")
    @allure.title("Check tab USDC ERC + ConnexPay")
    def test_check_tab_usds_erc_connex_pay(self, page: Page, pages: Pages, steps: Steps, playwright):
        page.goto(DASHBOARD_TOPUP_RANGE)
        steps.auth.authorize_in_test(page, USER_01.login, USER_01.password, 'Crypto topup')
        pages.dashboard.tab_usdc_erc.click()
        pages.dashboard.tag.check_text('Treasury')
        pages.dashboard.tag_2.check_text('USDC (ERC-20)')
        pages.dashboard.tag_3.check_text('ConnexPay')
        pages.dashboard.table_pagination.check_text('1 top-up')
        steps.dashboardSteps.check_text_in_row_top_ups(page, '$0.41', '2', "1 â€“ MTS")
        steps.dashboardSteps.check_text_in_row_top_ups(page, '$0.41', '6', 'USDC (ERC-20)')
        steps.dashboardSteps.check_text_in_row_top_ups(page, '$0.41', '9', 'ConnexPay')

    @pytest.mark.skip("")
    @allure.title("Check tab Deposits + ConnexPay")
    def test_check_tab_deposits_connex_pay(self, page: Page, pages: Pages, steps: Steps, playwright):
        page.goto(DASHBOARD_TOPUP_RANGE)
        steps.auth.authorize_in_test(page, USER_01.login, USER_01.password, 'Crypto topup')
        pages.dashboard.tab_deposits.click()
        pages.dashboard.tag.check_text('Deposit')
        pages.dashboard.tag_2.check_text('ConnexPay')
        pages.dashboard.table_pagination.check_text('8 top-ups')
        steps.dashboardSteps.check_text_in_row_top_ups(page, '$45.00', '2', '1 â€“ MTS')
        steps.dashboardSteps.check_text_in_row_top_ups(page, '$45.00', '4', 'Deposit')
        steps.dashboardSteps.check_text_in_row_top_ups(page, '$45.00', '9', 'ConnexPay')

    @pytest.mark.skip("")
    @allure.title("Check tab Processed + ConnexPay")
    def test_check_tab_processed_connex_pay(self, page: Page, pages: Pages, steps: Steps, playwright):
        page.goto(DASHBOARD_TOPUP_RANGE)
        steps.auth.authorize_in_test(page, USER_01.login, USER_01.password, 'Crypto topup')
        pages.dashboard.tab_processed.click()
        pages.dashboard.tag.check_text('ConnexPay')
        pages.dashboard.table_pagination.check_text('16 top-ups')
        steps.dashboardSteps.check_text_in_row_top_ups(page, '$200.00', '2', '6 â€“ ConnCompany')
        steps.dashboardSteps.check_text_in_row_top_ups(page, '$200.00', '4', 'Treasury')
        steps.dashboardSteps.check_text_in_row_top_ups(page, '$200.00', '3', 'Deposit Done')

    @allure.title("Check all tabs + Qolo")
    def test_check_all_tabs_qolo(self, page: Page, pages: Pages, steps: Steps, playwright):
        page.goto(DASHBOARD_TOPUP_RANGE)
        steps.auth.authorize_in_test(page, USER_01.login, USER_01.password, 'Crypto topup')
        pages.dashboard.tab_qolo.click()
        pages.dashboard.tag.check_text('Treasury')
        pages.dashboard.tag_2.check_text('USDT (TRC-20)')
        pages.dashboard.tag_3.check_text('Qolo')
        sleep(2)
        assert pages.dashboard.no_results.is_visible()
        assert pages.dashboard.text_change_filter.is_visible()
        assert pages.dashboard.btn_clear_filters.is_visible()

        pages.dashboard.tab_usdt_erc.click()
        pages.dashboard.tag.check_text('Treasury')
        pages.dashboard.tag_2.check_text('USDT (ERC-20)')
        pages.dashboard.tag_3.check_text('Qolo')
        assert pages.dashboard.no_results.is_visible()

        pages.dashboard.tab_usdc_erc.click()
        pages.dashboard.tag.check_text('Treasury')
        pages.dashboard.tag_2.check_text('USDC (ERC-20)')
        pages.dashboard.tag_3.check_text('Qolo')
        sleep(1.5)
        assert pages.dashboard.no_results.is_visible()
        pages.dashboard.tab_deposits.click()
        pages.dashboard.tag.check_text('Deposit')
        pages.dashboard.tag_2.check_text('Qolo')
        assert pages.dashboard.no_results.is_visible()
        pages.dashboard.tab_processed.click()
        pages.dashboard.tag.check_text('Qolo')
        assert pages.dashboard.text_change_filter.is_visible()

    @pytest.mark.skip("")
    @allure.title("Check All tab + USDT TRC")
    def test_check_tab_all_usdt_trc(self, page: Page, pages: Pages, steps: Steps, playwright):
        page.goto(DASHBOARD_TOPUP_RANGE)
        steps.auth.authorize_in_test(page, USER_01.login, USER_01.password, 'Crypto topup')
        pages.dashboard.tab_all.click()
        pages.dashboard.tag.check_text('Treasury')
        pages.dashboard.tag_2.check_text('USDT (TRC-20)')
        assert pages.dashboard.tag_3.is_not_on_page()
        pages.dashboard.table_pagination.check_text('5 top-ups')
        steps.dashboardSteps.check_text_in_row_top_ups(page, '$10.00', '9', 'Core Pay')
        steps.dashboardSteps.check_text_in_row_top_ups(page, '$10.00', '4', 'Treasury')
        steps.dashboardSteps.check_text_in_row_top_ups(page, '$10.00', '6', 'USDT (TRC-20)')

    @pytest.mark.skip("")
    @allure.title("Check All tab + USDT ERC")
    def test_check_tab_all_usdt_erc(self, page: Page, pages: Pages, steps: Steps, playwright):
        page.goto(DASHBOARD_TOPUP_RANGE)
        steps.auth.authorize_in_test(page, USER_01.login, USER_01.password, 'Crypto topup')
        pages.dashboard.tab_all.click()
        pages.dashboard.tab_usdt_erc.click()
        pages.dashboard.tag.check_text('Treasury')
        pages.dashboard.tag_2.check_text('USDT (ERC-20)')
        assert pages.dashboard.tag_3.is_not_on_page()
        pages.dashboard.table_pagination.check_text('1 top-up')
        steps.dashboardSteps.check_text_in_row_top_ups(page, '$30.00', '6', 'USDT (ERC-20)')

    @pytest.mark.skip("")
    @allure.title("Check All tab + USDC ERC")
    def test_check_tab_all_usds_erc(self, page: Page, pages: Pages, steps: Steps, playwright):
        page.goto(DASHBOARD_TOPUP_RANGE)
        steps.auth.authorize_in_test(page, USER_01.login, USER_01.password, 'Crypto topup')
        pages.dashboard.tab_all.click()
        pages.dashboard.tab_usdc_erc.click()
        pages.dashboard.tag.check_text('Treasury')
        pages.dashboard.tag_2.check_text('USDC (ERC-20)')
        assert pages.dashboard.tag_3.is_not_on_page()
        pages.dashboard.table_pagination.check_text('1 top-up')
        steps.dashboardSteps.check_text_in_row_top_ups(page, '$0.41', '6', 'USDC (ERC-20)')

    @pytest.mark.skip("")
    @allure.title("Check All tab + Deposits")
    def test_check_tab_all_deposits(self, page: Page, pages: Pages, steps: Steps, playwright):
        page.goto(DASHBOARD_TOPUP_RANGE)
        steps.auth.authorize_in_test(page, USER_01.login, USER_01.password, 'Crypto topup')
        pages.dashboard.tab_all.click()
        pages.dashboard.tab_deposits.click()
        pages.dashboard.tag.check_text('Deposit')
        assert pages.dashboard.tag_2.is_not_on_page()
        pages.dashboard.table_pagination.check_text('8 top-ups')
        steps.dashboardSteps.check_text_in_row_top_ups(page, '$8.00', '4', 'Deposit')
        steps.dashboardSteps.check_text_in_row_top_ups(page, '$5.00', '4', 'Deposit')
        steps.dashboardSteps.check_text_in_row_top_ups(page, '$20.00', '4', 'Deposit')

    @pytest.mark.skip("")
    @allure.title("Check All tab + Processed")
    def test_check_tab_all_processed(self, page: Page, pages: Pages, steps: Steps, playwright):
        page.goto(DASHBOARD_TOPUP_RANGE)
        steps.auth.authorize_in_test(page, USER_01.login, USER_01.password, 'Crypto topup')
        pages.dashboard.tab_all.click()
        pages.dashboard.tab_processed.click()
        assert pages.dashboard.tag.is_not_on_page()
        pages.dashboard.table_pagination.check_text('17 top-ups')
        steps.dashboardSteps.check_text_in_row_top_ups(page, '$20.00', '4', 'Deposit')
        steps.dashboardSteps.check_text_in_row_top_ups(page, '$20.00', '6', 'USDT (TRC-20)')
        steps.dashboardSteps.check_text_in_row_top_ups(page, '$20.00', '9', 'ConnexPay')
        steps.dashboardSteps.check_text_in_row_top_ups(page, '$50.00', '9', 'ConnexPay')
        steps.dashboardSteps.check_text_in_row_top_ups(page, '$50.00', '2', '43 â€“ TestAirtable')

    @pytest.mark.skip("")
    @allure.title("Switch tabs + USDT TRC")
    def test_switch_tabs_usdt_trc(self, page: Page, pages: Pages, steps: Steps, playwright):
        page.goto(DASHBOARD_TOPUP_RANGE)
        steps.auth.authorize_in_test(page, USER_01.login, USER_01.password, 'Crypto topup')
        pages.dashboard.table_pagination.check_text('4 top-ups')
        pages.dashboard.tab_qolo.click()
        sleep(1.5)
        assert pages.dashboard.no_results.is_visible()
        assert pages.dashboard.text_change_filter.is_visible()
        assert pages.dashboard.btn_clear_filters.is_visible()
        pages.dashboard.tab_all.click()
        pages.dashboard.table_pagination.check_text('5 top-ups')

    @allure.title("Switch tabs + USDT ERC")
    def test_switch_tabs_usdt_erc(self, page: Page, pages: Pages, steps: Steps, playwright):
        page.goto(DASHBOARD_TOPUP_RANGE)
        steps.auth.authorize_in_test(page, USER_01.login, USER_01.password, 'Crypto topup')
        pages.dashboard.table_pagination.check_text('4 top-ups')
        pages.dashboard.tab_usdt_erc.click()
        pages.dashboard.table_pagination.check_text('1 top-up')
        pages.dashboard.tab_all.click()
        pages.dashboard.table_pagination.check_text('1 top-up')
        pages.dashboard.tab_qolo.click()
        sleep(1.5)
        assert pages.dashboard.no_results.is_visible()

    @allure.title("Switch tabs + USDC ERC")
    def test_switch_tabs_usdc_erc(self, page: Page, pages: Pages, steps: Steps, playwright):
        page.goto(DASHBOARD_TOPUP_RANGE)
        steps.auth.authorize_in_test(page, USER_01.login, USER_01.password, 'Crypto topup')
        pages.dashboard.table_pagination.check_text('4 top-ups')
        pages.dashboard.tab_usdc_erc.click()
        pages.dashboard.table_pagination.check_text('1 top-up')
        pages.dashboard.tab_qolo.click()
        sleep(1)
        assert pages.dashboard.no_results.is_visible()
        pages.dashboard.tab_all.click()
        pages.dashboard.table_pagination.check_text('1 top-up')

    @pytest.mark.skip("")
    @allure.title("Switch tabs + Deposits")
    def test_switch_tabs_deposits(self, page: Page, pages: Pages, steps: Steps, playwright):
        page.goto(DASHBOARD_TOPUP_RANGE)
        steps.auth.authorize_in_test(page, USER_01.login, USER_01.password, 'Crypto topup')
        pages.dashboard.table_pagination.check_text('4 top-ups')
        pages.dashboard.tab_deposits.click()
        pages.dashboard.table_pagination.check_text('8 top-ups')
        pages.dashboard.tab_qolo.click()
        sleep(2)
        assert pages.dashboard.no_results.is_visible()
        pages.dashboard.tab_all.click()
        pages.dashboard.table_pagination.check_text('8 top-ups')

    @pytest.mark.skip("")
    @allure.title("Switch tabs + Processed")
    def test_switch_tabs_processed(self, page: Page, pages: Pages, steps: Steps, playwright):
        page.goto(DASHBOARD_TOPUP_RANGE)
        steps.auth.authorize_in_test(page, USER_01.login, USER_01.password, 'Crypto topup')
        pages.dashboard.table_pagination.check_text('4 top-ups')
        pages.dashboard.tab_processed.click()
        pages.dashboard.table_pagination.check_text('16 top-ups')
        pages.dashboard.tab_all.click()
        pages.dashboard.table_pagination.check_text('17 top-ups')
        pages.dashboard.tab_qolo.click()
        sleep(2)
        assert pages.dashboard.no_results.is_visible()










