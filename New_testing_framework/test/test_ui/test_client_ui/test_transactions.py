from time import sleep

import allure
from playwright.sync_api import Page, expect

from api.function_api import api_request_context, \
    api_post_auth_trans, api_post_pending_with_auth, api_post_with_auth, api_post, \
    api_request, api_move_money
from data.input_data.data_card import REFUND, COUNTRY_US, CURRENCY_USD, PENDING, SETTLED, REVERSAL, DECLINED, COUNTRY_GB, \
    CURRENCY_EUR
from data.input_data.decline_reasons import NOT_AVAILABLE_BALANCE, NOT_ENOUGH_MONEY, APPROVED_SUCCES
from data.input_data.random_data import random_numbers

from data.input_data.users import USER_RU, USER_DATA_RU, USER_UK, USER_DATA_RU_EMPLOYEE
from pages.pages import Pages

from steps import Steps
from test.test_api.conftest import VISA_TEST, VISA_TRANS, MC, CARD_EMPLOYEE
from utils.consts import AUTH_URL_ALL_TIME, AUTH_URL, AUTH_URL_ALL_TIME_EMPLOYEE


class TestTransactions:
    @allure.title("Check page")
    def test_check_page(self, page: Page, pages: Pages,
                        steps: Steps, playwright):
        page.goto(AUTH_URL_ALL_TIME)
        steps.auth.authorize_in_test(page, USER_DATA_RU.login, USER_DATA_RU.password, "Счет")
        pages.navigation.navigation_trans_ru.click()
        pages.navigation.navigation_cards_ru.is_not_on_page(timeout=3000)
        pages.cards.title_cash_after_login.check_text("Транзакции")
        assert pages.trans.btn_export.is_visible()
        text = pages.trans.filter_trans.get_placeholder()
        assert text == "Транзакция"
        assert pages.trans.btn_status_ru.is_visible()
        assert pages.trans.btn_user_ru.is_visible()
        assert pages.trans.btn_card_ru.is_visible()
        assert pages.trans.btn_date_and_time_ru.is_visible()
        assert page.locator("(//tr[contains(@class, 'styles_summary')]//th)[1]").is_visible()
        pages.trans.all_spend_sum.check_text("262,55 $")
        pages.trans.popper_activator.click()
        expect(page.locator("//div[@data-test-id = 'info-popover-content']")).to_have_text("Settled205,00 $Pending101,00 $Reversed18,00 $Refund47,00 $Междунар. комиссия1,46 $Комиссия за деклайн1,00 $Конвертация1,09 $")
        assert pages.cards.date_filter_in_title_table.is_visible()
        expect(page.locator("//th[contains(text(), 'Транзакция')]")).to_be_visible()
        expect(page.locator("//th[contains(text(), 'Статус')]")).to_be_visible()
        expect(page.locator("//th[contains(text(), 'Пользователь')]")).to_be_visible()
        expect(page.locator("//th[contains(text(), 'Карта')]")).to_be_visible()
        expect(page.locator("//span[contains(text(), 'Затраты')]")).to_be_visible()
        pages.team.table_pagination.check_text('1-25 из 56 транзакций')

    @allure.title("Check amount rows")
    def test_check_amount_rows(self, page: Page, pages: Pages,
                               steps: Steps, playwright):
        page.goto(AUTH_URL_ALL_TIME)
        steps.auth.authorize_in_test(page, USER_DATA_RU.login, USER_DATA_RU.password, "Счет")
        pages.navigation.navigation_trans_ru.click()
        pages.navigation.navigation_cards_ru.is_not_on_page(timeout=3000)
        pages.cards.title_cash_after_login.check_text("Транзакции")
        row = page.locator("//tr[contains(@class, 'hover-visible-container')]")
        expect(row).to_have_count(25)
        pages.trans.btn_next_page.is_on_page(3000)
        pages.trans.btn_next_page.click()
        expect(row).to_have_count(25)
        pages.trans.btn_next_page.click()
        expect(row).to_have_count(6)
        assert page.get_by_text("51-56 из 56 транзакций").is_visible()

    @allure.title("Check alone row data")
    def test_check_row_data(self, page: Page, pages: Pages,
                            steps: Steps, playwright):
        page.goto(AUTH_URL_ALL_TIME)
        steps.auth.authorize_in_test(page, USER_DATA_RU.login, USER_DATA_RU.password, "Счет")
        pages.navigation.navigation_trans_ru.click()
        pages.navigation.navigation_cards_ru.is_not_on_page(timeout=3000)
        pages.cards.title_cash_after_login.check_text("Транзакции")
        pages.trans.btn_next_page.click()
        pages.cards.spinner.is_on_page(timeout=3000)
        pages.cards.spinner.is_not_on_page(timeout=3000)
        steps.transactionSteps.check_some_rows_transactions(pages)

    @allure.title("Check card pending transactions")
    def test_check_card_pending_transaction(self, page: Page, pages: Pages,
                                            steps: Steps, playwright):
        page.goto(AUTH_URL_ALL_TIME)
        steps.auth.authorize_in_test(page, USER_DATA_RU.login, USER_DATA_RU.password, "Счет")
        pages.navigation.navigation_trans_ru.click()
        pages.navigation.navigation_cards_ru.is_not_on_page(timeout=3000)
        pages.cards.title_cash_after_login.check_text("Транзакции")
        pages.trans.first_row.click()
        assert pages.trans.pending_card_transaction.is_on_page(timeout=3000)
        pages.trans.sum_trans_on_card_pending.check_text('1,00\xa0$')
        expect(page.locator("//*[@data-test-id='modal-body']//p")).to_have_css("color", "rgba(20, 21, 26, 0.6)")
        expect(page.locator('//*[@data-test-id="modal-header"]//*[@data-test-id="pip"]')).to_have_css("color", "rgba(20, 21, 26, 0.6)")
        pages.trans.number_card_on_card.check_text('••6070 65767invated emploee22 апр. 2024 г., 17:13')
        pages.trans.ads_trans_on_card.check_text('Facebook-devPending')
        pages.trans.description_modal_trans.check_text('ОписаниеFACEBK ADS')
        pages.trans.country_modal_trans.check_text('СтранаUS')
        pages.trans.currency_modal_trans.check_text('ВалютаUSD')
        pages.trans.mcc_modal_trans.check_text('MCC7311')
        pages.trans.transaction_id_modal_trans.check_text('ID транзакции4154')
        value = page.get_attribute("(//div[contains(@class, 'styles_rowStartContent')])[1]//img", "src")
        assert value == '/images/card/visa.svg'
        icon_fb = page.get_attribute("(//div[contains(@class, 'styles_rowStartContent')])[3]//img", "src")
        assert icon_fb == "https://dev.api.devhost.io/media/merchant_ico/facebook-dev.png"
        pages.trans.btn_close_card.click()
        expect(page.locator('//*[@data-test-id="modal-dialog"]')).not_to_be_visible()

    @allure.title("Check card settled transactions")
    def test_check_card_settled_transaction(self, page: Page, pages: Pages, steps: Steps, playwright):
        page.goto(AUTH_URL_ALL_TIME)
        steps.auth.authorize_in_test(page, USER_DATA_RU.login, USER_DATA_RU.password, "Счет")
        pages.navigation.navigation_trans_ru.click()
        pages.navigation.navigation_cards_ru.is_not_on_page(timeout=3000)
        pages.cards.title_cash_after_login.check_text("Транзакции")
        pages.trans.twelve_row.click()
        pages.trans.settled_card_transaction.is_on_page(timeout=2000)
        pages.trans.sum_trans_on_card_settled.check_text('2,00\xa0$')
        expect(page.locator("//*[@data-test-id='modal-body']//p")).to_have_css("color", "rgb(20, 21, 26)")
        expect(page.locator('//*[@data-test-id="modal-header"]//*[@data-test-id="pip"]')).to_have_css("color", "rgb(111, 198, 87)")
        expect(page.locator('//*[@data-test-id="modal-body"]//div[contains(@class, "display_flex gap_2")]/span[1]')).to_have_css("color", "rgb(88, 182, 62)")
        pages.trans.number_card_on_card.check_text('••8002 6 appleinvated emploee22 апр. 2024 г., 16:52')
        pages.trans.ads_trans_on_card.check_text('Facebook-devSettled22 апр. 2024 г., 16:52')
        pages.trans.description_modal_trans.check_text('ОписаниеFACEBK ADS')
        pages.trans.country_modal_trans.check_text('СтранаUS')
        pages.trans.currency_modal_trans.check_text('ВалютаUSD')
        pages.trans.mcc_modal_trans.check_text('MCC7311')
        pages.trans.transaction_id_modal_trans.check_text('ID транзакции4143')
        value = page.get_attribute("(//div[contains(@class, 'styles_rowStartContent')])[1]//img", "src")
        assert value == '/images/card/visa.svg'
        icon_fb = page.get_attribute("(//div[contains(@class, 'styles_rowStartContent')])[3]//img", "src")
        assert icon_fb == "https://dev.api.devhost.io/media/merchant_ico/facebook-dev.png"

    @allure.title("Check card refund transactions")
    def test_check_card_refund_transaction(self, page: Page, pages: Pages,
                                           steps: Steps, playwright):
        page.goto(AUTH_URL_ALL_TIME)
        steps.auth.authorize_in_test(page, USER_DATA_RU.login, USER_DATA_RU.password, "Счет")
        pages.navigation.navigation_trans_ru.click()
        pages.navigation.navigation_cards_ru.is_not_on_page(timeout=3000)
        pages.cards.title_cash_after_login.check_text("Транзакции")
        pages.trans.sixteen_row.click()
        pages.trans.refund_card_transaction.is_on_page(timeout=2000)
        pages.trans.sum_trans_on_card_settled.check_text('14,00\xa0$')
        expect(page.locator("//*[@data-test-id='modal-body']//p")).to_have_css("color", "rgb(88, 182, 62)")
        expect(page.locator('//*[@data-test-id="modal-header"]//*[@data-test-id="pip"]')).to_have_css("color", "rgb(69, 143, 255)")
        expect(page.locator('//*[@data-test-id="modal-body"]//div[contains(@class, "display_flex gap_2")]/span[1]')).to_have_css("color", "rgb(69, 143, 255)")
        pages.trans.number_card_on_card.check_text('Facebook-devRefund18 апр. 2024 г., 10:22')
        pages.trans.ads_trans_on_card.check_text('••3663 WEDSCXStest do not change')
        pages.trans.description_modal_trans.check_text('ОписаниеFACEBK ADS')
        pages.trans.country_modal_trans.check_text('СтранаIE')
        pages.trans.currency_modal_trans.check_text('ВалютаUSD')
        pages.trans.mcc_modal_trans.check_text('MCC7311')
        pages.trans.transaction_id_modal_trans.check_text('ID транзакции4135')
        value = page.get_attribute("(//div[contains(@class, 'styles_rowStartContent')])[1]//img", "src")
        assert value == "https://dev.api.devhost.io/media/merchant_ico/facebook-dev.png"
        icon_fb = page.get_attribute("(//div[contains(@class, 'styles_rowStartContent')])[3]//img", "src")
        assert icon_fb == '/images/card/mastercard.svg'

    @allure.title("Check reversed transaction")
    def test_check_reversed_transaction(self, page: Page, pages: Pages,
                                        steps: Steps, playwright):
        page.goto(AUTH_URL_ALL_TIME)
        steps.auth.authorize_in_test(page, USER_DATA_RU.login, USER_DATA_RU.password, "Счет")
        pages.navigation.navigation_trans_ru.click()
        pages.navigation.navigation_cards_ru.is_not_on_page(timeout=3000)
        pages.cards.title_cash_after_login.check_text("Транзакции")
        pages.trans.btn_next_page.click()
        pages.cards.spinner.is_on_page(timeout=3000)
        pages.cards.spinner.is_not_on_page(timeout=3000)
        pages.trans.seventeen_row.click()
        pages.trans.sum_trans_on_card_settled.check_text('1,00\xa0$')
        expect(page.locator("//*[@data-test-id='modal-body']//p")).to_have_css("color", "rgb(20, 21, 26)")
        expect(page.locator('//*[@data-test-id="modal-header"]//*[@data-test-id="pip"]')).to_have_css("color", "rgb(253, 176, 34)")
        expect(page.locator('//*[@data-test-id="modal-body"]//div[contains(@class, "display_flex gap_2")]/span[1]')).to_have_css("color", "rgb(253, 176, 34)")
        pages.trans.number_card_on_card.check_text('••4518 HRTYUtest do not change18 апр. 2024 г., 10:06')
        pages.trans.ads_trans_on_card.check_text('Facebook-devReversed18 апр. 2024 г., 10:06')
        pages.trans.description_modal_trans.check_text('ОписаниеFACEBK ADS')
        pages.trans.country_modal_trans.check_text('СтранаUS')
        pages.trans.currency_modal_trans.check_text('ВалютаUSD')
        pages.trans.mcc_modal_trans.check_text('MCC7311')
        pages.trans.transaction_id_modal_trans.check_text('ID транзакции4109')
        value = page.get_attribute("(//div[contains(@class, 'styles_rowStartContent')])[1]//img", "src")
        assert value == '/images/card/mastercard.svg'
        icon_fb = page.get_attribute("(//div[contains(@class, 'styles_rowStartContent')])[3]//img", "src")
        assert icon_fb == "https://dev.api.devhost.io/media/merchant_ico/facebook-dev.png"

    @allure.title("Check declined transactions")
    def test_check_declined_transaction(self, page: Page, pages: Pages,
                                        steps: Steps, playwright):
        page.goto(AUTH_URL_ALL_TIME)
        steps.auth.authorize_in_test(page, USER_DATA_RU.login, USER_DATA_RU.password, "Счет")
        pages.navigation.navigation_trans_ru.click()
        pages.navigation.navigation_cards_ru.is_not_on_page(timeout=3000)
        pages.cards.title_cash_after_login.check_text("Транзакции")
        pages.trans.btn_next_page.click()
        pages.cards.spinner.is_on_page(timeout=3000)
        pages.cards.spinner.is_not_on_page(timeout=3000)
        pages.trans.twenty_two_row.click()
        pages.trans.sum_trans_on_card_settled.check_text('1,00\xa0$')
        expect(page.locator("//*[@data-test-id='modal-body']//p")).to_have_css("color", "rgb(230, 72, 61)")
        expect(page.locator('//*[@data-test-id="modal-header"]//*[@data-test-id="pip"]')).to_have_css("color", "rgb(230, 72, 61)")
        expect(page.locator('(//*[@data-test-id="modal-body"]//div[contains(@class, "display_flex flex-direction_column gap_1")]/span)[7]')).to_have_css("color", "rgb(230, 72, 61)")
        pages.trans.number_card_on_card.check_text('••1839 ASQWEDCtest do not change18 апр. 2024 г., 10:01')
        pages.trans.ads_trans_on_card.check_text('Транзакция отклоненаThe transaction was declined for an unknown reason.Комиссия за деклайн 0,50 $')
        pages.trans.description_modal_trans.check_text('ОписаниеFACEBK ADS')
        pages.trans.country_modal_trans.check_text('СтранаIE')
        pages.trans.currency_modal_trans.check_text('ВалютаEUR')
        pages.trans.mcc_modal_trans.check_text('MCC7311')
        pages.trans.transaction_id_modal_trans.check_text('ID транзакции4099')
        value = page.get_attribute("(//div[contains(@class, 'styles_rowStartContent')])[1]//img", "src")
        assert value == '/images/card/mastercard.svg'
        icon_fb = page.get_attribute("//div[@data-test-id = 'modal-dialog']//*[@data-test-id = 'avatar']//img", "src")
        assert icon_fb == "https://dev.api.devhost.io/media/merchant_ico/facebook-dev.png"

    @allure.title("Check all dates")
    def test_check_all_dates(self, page: Page, pages: Pages,
                             steps: Steps, playwright):
        page.goto(AUTH_URL_ALL_TIME)
        steps.auth.authorize_in_test(page, USER_DATA_RU.login, USER_DATA_RU.password, "Счет")
        pages.navigation.navigation_trans_ru.click()
        pages.navigation.navigation_cards_ru.is_not_on_page(timeout=3000)
        pages.cards.title_cash_after_login.check_text("Транзакции")
        steps.transactionSteps.check_all_dates(page)
        pages.trans.btn_next_page.click()
        pages.cards.spinner.is_on_page(timeout=3000)
        pages.cards.spinner.is_not_on_page(timeout=3000)
        steps.transactionSteps.check_all_dates_second_page(page)
        pages.trans.btn_next_page.click()
        pages.cards.spinner.is_on_page(timeout=3000)
        pages.cards.spinner.is_not_on_page(timeout=3000)
        steps.transactionSteps.check_all_dates_third_page(page)

    @allure.title("Check all transactions")
    def test_check_all_transactions(self, page: Page, pages: Pages,
                                    steps: Steps, playwright):
        page.goto(AUTH_URL_ALL_TIME)
        steps.auth.authorize_in_test(page, USER_DATA_RU.login, USER_DATA_RU.password, "Счет")
        pages.navigation.navigation_trans_ru.click()
        pages.navigation.navigation_cards_ru.is_not_on_page(timeout=3000)
        pages.cards.title_cash_after_login.check_text("Транзакции")
        steps.transactionSteps.check_all_transactions(page)
        pages.trans.btn_next_page.click()
        pages.cards.spinner.is_on_page(timeout=3000)
        pages.cards.spinner.is_not_on_page(timeout=3000)
        steps.transactionSteps.check_all_transactions_second_page(page)
        pages.trans.btn_next_page.click()
        pages.cards.spinner.is_on_page(timeout=3000)
        pages.cards.spinner.is_not_on_page(timeout=3000)
        steps.transactionSteps.check_all_transactions_third_page(page)

    @allure.title("Check all statuses")
    def test_check_all_status(self, page: Page, pages: Pages,
                              steps: Steps, playwright):
        page.goto(AUTH_URL_ALL_TIME)
        steps.auth.authorize_in_test(page, USER_DATA_RU.login, USER_DATA_RU.password, "Счет")
        pages.navigation.navigation_trans_ru.click()
        pages.navigation.navigation_cards_ru.is_not_on_page(timeout=3000)
        pages.cards.title_cash_after_login.check_text("Транзакции")
        steps.transactionSteps.check_all_statuses(page)
        pages.trans.btn_next_page.click()
        pages.cards.spinner.is_on_page(timeout=3000)
        pages.cards.spinner.is_not_on_page(timeout=3000)
        steps.transactionSteps.check_all_statuses_second_page(page)
        pages.trans.btn_next_page.click()
        pages.cards.spinner.is_on_page(timeout=3000)
        pages.cards.spinner.is_not_on_page(timeout=3000)
        steps.transactionSteps.check_all_statuses_third_page(page)

    @allure.title("Check all users")
    def test_check_all_users(self, page: Page, pages: Pages,
                             steps: Steps, playwright):
        page.goto(AUTH_URL_ALL_TIME)
        steps.auth.authorize_in_test(page, USER_DATA_RU.login, USER_DATA_RU.password, "Счет")
        pages.navigation.navigation_trans_ru.click()
        pages.navigation.navigation_cards_ru.is_not_on_page(timeout=3000)
        pages.cards.title_cash_after_login.check_text("Транзакции")
        steps.transactionSteps.check_all_users(page)
        pages.trans.btn_next_page.click()
        pages.cards.spinner.is_on_page(timeout=3000)
        pages.cards.spinner.is_not_on_page(timeout=3000)
        steps.transactionSteps.check_all_users_second_page(page)
        pages.trans.btn_next_page.click()
        pages.cards.spinner.is_on_page(timeout=3000)
        pages.cards.spinner.is_not_on_page(timeout=3000)
        steps.transactionSteps.check_all_users_third_page(page)

    @allure.title("Check all cards")
    def test_check_all_cards(self, page: Page, pages: Pages,
                             steps: Steps, playwright):
        page.goto(AUTH_URL_ALL_TIME)
        steps.auth.authorize_in_test(page, USER_DATA_RU.login, USER_DATA_RU.password, "Счет")
        pages.navigation.navigation_trans_ru.click()
        pages.navigation.navigation_cards_ru.is_not_on_page(timeout=3000)
        pages.cards.title_cash_after_login.check_text("Транзакции")
        steps.transactionSteps.check_all_cards(page)
        pages.trans.btn_next_page.click()
        pages.cards.spinner.is_on_page(timeout=3000)
        pages.cards.spinner.is_not_on_page(timeout=3000)
        steps.transactionSteps.check_all_cards_second_page(page)
        pages.trans.btn_next_page.click()
        pages.cards.spinner.is_on_page(timeout=3000)
        pages.cards.spinner.is_not_on_page(timeout=3000)
        steps.transactionSteps.check_all_cards_third_page(page)

    @allure.title("Check all spend money")
    def test_check_all_spend_money(self, page: Page, pages: Pages,
                                   steps: Steps, playwright):
        page.goto(AUTH_URL_ALL_TIME)
        steps.auth.authorize_in_test(page, USER_DATA_RU.login, USER_DATA_RU.password, "Счет")
        pages.navigation.navigation_trans_ru.click()
        pages.navigation.navigation_cards_ru.is_not_on_page(timeout=3000)
        pages.cards.title_cash_after_login.check_text("Транзакции")
        steps.transactionSteps.check_all_money(page)
        pages.trans.btn_next_page.click()
        pages.cards.spinner.is_on_page(timeout=3000)
        pages.cards.spinner.is_not_on_page(timeout=3000)
        steps.transactionSteps.check_all_money_second_page(page)
        pages.trans.btn_next_page.click()
        pages.cards.spinner.is_on_page(timeout=3000)
        pages.cards.spinner.is_not_on_page(timeout=3000)
        steps.transactionSteps.check_all_money_third_page(page)

    @allure.title("Filter by status transactions")
    def test_filter_by_status_transaction(self, page: Page, pages: Pages,
                                          steps: Steps, playwright):
        page.goto(AUTH_URL_ALL_TIME)
        steps.auth.authorize_in_test(page, USER_DATA_RU.login, USER_DATA_RU.password, "Счет")
        pages.navigation.navigation_trans_ru.click()
        pages.navigation.navigation_cards_ru.is_not_on_page(timeout=3000)
        pages.cards.title_cash_after_login.check_text("Транзакции")
        pages.trans.filter_status.click()
        pages.trans.filter_settled.click()
        pages.trans.filter_refund.click()
        pages.trans.filter_status.click()
        pages.trans.selected_filters.check_text('Settled, Refund')
        expect(page.locator("//tr[contains(@class, 'hover-visible-container')]")).to_have_count(25)
        pages.trans.calendar_button.click()
        pages.trans.calendar_all_time.click()
        pages.trans.calendar_button_apply_ru.click()
        pages.cards.spinner.is_on_page(timeout=3000)
        pages.cards.spinner.is_not_on_page(timeout=3000)
        steps.transactionSteps.check_filter_statuses(page)

    @allure.title("Filter by user")
    def test_filter_by_user(self, page: Page, pages: Pages,
                            steps: Steps, playwright):
        page.goto(AUTH_URL_ALL_TIME)
        steps.auth.authorize_in_test(page, USER_DATA_RU.login, USER_DATA_RU.password, "Счет")
        pages.navigation.navigation_trans_ru.click()
        pages.navigation.navigation_cards_ru.is_not_on_page(timeout=3000)
        pages.cards.title_cash_after_login.check_text("Транзакции")
        pages.trans.filter_user.click()
        pages.trans.checkbox_filter_second.click()
        pages.trans.filter_user.click()
        pages.trans.calendar_button.click()
        pages.trans.calendar_all_time.click()
        pages.trans.calendar_button_apply_ru.click()
        pages.cards.spinner.is_on_page(timeout=3000)
        pages.cards.spinner.is_not_on_page(timeout=3000)
        pages.trans.selected_filters.check_text('invated emploee')
        steps.transactionSteps.check_filter_by_users(page)

    @allure.title("Filter by card")
    def test_filter_by_card(self, page: Page, pages: Pages,
                            steps: Steps, playwright):
        page.goto(AUTH_URL_ALL_TIME)
        steps.auth.authorize_in_test(page, USER_DATA_RU.login, USER_DATA_RU.password, "Счет")
        pages.navigation.navigation_trans_ru.click()
        pages.navigation.navigation_cards_ru.is_not_on_page(timeout=3000)
        pages.cards.title_cash_after_login.check_text("Транзакции")
        pages.trans.filter_by_card_ru.click()
        pages.trans.input_at_filter.fill("8002")
        page.locator('(//span[contains(text(), "••8002 6 apple")])[1]').click()
        pages.trans.filter_by_card_ru.click()
        pages.trans.calendar_button.click()
        pages.trans.calendar_all_time.click()
        pages.trans.calendar_button_apply_ru.click()
        pages.cards.spinner.is_on_page(timeout=3000)
        pages.cards.spinner.is_not_on_page(timeout=3000)
        pages.trans.selected_filters.check_text('••8002 6 apple')
        steps.transactionSteps.check_filter_by_card(page)

    @allure.title("Filter by status user & card")
    def test_filter_by_status_user_card(self, page: Page, pages: Pages,
                                        steps: Steps, playwright):
        page.goto(AUTH_URL_ALL_TIME)
        steps.auth.authorize_in_test(page, USER_DATA_RU.login, USER_DATA_RU.password, "Счет")
        pages.navigation.navigation_trans_ru.click()
        pages.navigation.navigation_cards_ru.is_not_on_page(timeout=3000)
        pages.cards.title_cash_after_login.check_text("Транзакции")
        pages.trans.filter_status.click()
        pages.trans.filter_declined.click()
        pages.trans.filter_pending.click()
        pages.trans.filter_reversed.click()
        pages.trans.filter_status.click()
        pages.trans.filter_user.click()
        pages.trans.checkbox_filter_first.click()
        pages.trans.filter_user.click()
        pages.trans.filter_by_card_ru.click()
        pages.trans.input_at_filter.fill("6980")
        page.locator('(//span[contains(text(), "••6980 test")])[1]').click()
        pages.trans.filter_by_card_ru.click()
        pages.trans.calendar_button.click()
        pages.trans.calendar_all_time.click()
        pages.trans.calendar_button_apply_ru.click()
        pages.cards.spinner.is_on_page(timeout=3000)
        pages.cards.spinner.is_not_on_page(timeout=3000)
        steps.transactionSteps.check_results_after_search(page)

    @allure.title("Check spend filter by status user card")
    def test_check_spend_filter_by_status_user_card(self, page: Page, pages: Pages,
                                                    steps: Steps, playwright):
        page.goto(AUTH_URL_ALL_TIME)
        steps.auth.authorize_in_test(page, USER_DATA_RU.login, USER_DATA_RU.password, "Счет")
        pages.navigation.navigation_trans_ru.click()
        pages.navigation.navigation_cards_ru.is_not_on_page(timeout=3000)
        pages.cards.title_cash_after_login.check_text("Транзакции")
        pages.trans.filter_status.click()
        pages.trans.filter_declined.click()
        pages.trans.filter_pending.click()
        pages.trans.filter_reversed.click()
        pages.trans.filter_status.click()
        pages.trans.filter_user.click()
        pages.trans.checkbox_filter_first.click()
        pages.trans.filter_user.click()
        pages.trans.filter_by_card_ru.click()
        pages.trans.input_at_filter.fill("6980")
        page.locator('(//span[contains(text(), "••6980 test")])[1]').click()
        pages.trans.filter_by_card_ru.click()
        pages.trans.calendar_button.click()
        pages.trans.calendar_all_time.click()
        pages.trans.calendar_button_apply_ru.click()
        pages.cards.spinner.is_on_page(timeout=3000)
        pages.cards.spinner.is_not_on_page(timeout=3000)
        pages.trans.popper_activator.click()
        steps.transactionSteps.check_text_at_info_popover(page)

    @allure.title("Sort by time")
    def test_sort_by_time(self, page: Page, pages: Pages,
                          steps: Steps, playwright):
        page.goto(AUTH_URL_ALL_TIME)
        steps.auth.authorize_in_test(page, USER_DATA_RU.login, USER_DATA_RU.password, "Счет")
        pages.navigation.navigation_trans_ru.click()
        pages.navigation.navigation_cards_ru.is_not_on_page(timeout=3000)
        pages.cards.title_cash_after_login.check_text("Транзакции")
        pages.trans.filter_user.click()
        pages.trans.checkbox_filter_second.click()
        pages.trans.filter_user.click()
        pages.cards.spinner.is_on_page(timeout=3000)
        pages.cards.spinner.is_not_on_page(timeout=3000)
        steps.transactionSteps.check_dates_sort_by_time(page)

    @allure.title("Send pending transaction")
    def test_send_pending_transaction(self, page: Page, pages: Pages,
                                      steps: Steps, playwright, api_request_context):
        ser = random_numbers()
        page.goto(AUTH_URL)
        api_post(api_request_context, 1, MC, SETTLED, COUNTRY_GB, CURRENCY_USD)
        steps.auth.authorize_in_test(page, USER_RU.login, USER_RU.password, "Счет")
        pages.navigation.navigation_trans_ru.click()
        pages.navigation.navigation_cards_ru.is_not_on_page(timeout=3000)
        pages.cards.title_cash_after_login.check_text("Транзакции")
        text = pages.trans.sum_trans_first_row.get_text()
        api_post(api_request_context, ser, MC, PENDING, COUNTRY_US, CURRENCY_USD)
        page.reload()
        pages.cards.spinner.is_on_page(timeout=3000)
        pages.cards.spinner.is_not_on_page(timeout=3000)
        text_second = pages.trans.sum_trans_first_row.get_text()
        assert text != text_second
        pages.trans.first_row.click()
        assert pages.trans.pending_card_transaction.is_on_page(timeout=2500)
        pages.trans.sum_trans_first_row.check_text(f"{ser},00\xa0$")

    @allure.title("Send pending fee transaction")
    def test_send_pending_fee_transaction(self, page: Page, pages: Pages,
                                          steps: Steps, playwright, api_request_context):
        ser = 8
        api_post(api_request_context, 1, MC, SETTLED, COUNTRY_GB, CURRENCY_USD)
        page.goto(AUTH_URL)
        steps.auth.authorize_in_test(page, USER_RU.login, USER_RU.password, "Счет")
        pages.navigation.navigation_trans_ru.click()
        pages.navigation.navigation_cards_ru.is_not_on_page(timeout=3000)
        pages.cards.title_cash_after_login.check_text("Транзакции")
        pages.cards.spinner.is_not_on_page(timeout=3000)
        text = pages.trans.sum_trans_first_row_spend_trans.get_text()
        api_post(api_request_context, ser, MC, PENDING, COUNTRY_GB, CURRENCY_EUR)
        page.reload()
        pages.cards.spinner.is_on_page(timeout=3000)
        pages.cards.spinner.is_not_on_page(timeout=3000)
        text_second = pages.trans.sum_trans_first_row_spend_trans.get_text()
        assert text != text_second
        pages.trans.first_row.click()
        assert pages.trans.pending_card_transaction.is_on_page(timeout=2500)
        assert page.get_by_text("Конвертировано в").is_visible()
        assert page.get_by_text("1,00 USD = ").is_visible()
        assert page.get_by_text("Комиссия за обмен валюты").is_visible()
        assert page.get_by_text("Комиссия за международный платеж").is_visible()
        pages.trans.sum_trans_first_row_spend_trans.check_text("8,67 $")

    @allure.title("Send pending fee fx")
    def test_send_pending_fee_another_country(self, page: Page, pages: Pages, steps: Steps, playwright, api_request_context):
        ser = 11
        page.goto(AUTH_URL)
        api_post(api_request_context, 1, MC, SETTLED, COUNTRY_GB, CURRENCY_USD)
        steps.auth.authorize_in_test(page, USER_RU.login, USER_RU.password, "Счет")
        pages.navigation.navigation_trans_ru.click()
        pages.navigation.navigation_cards_ru.is_not_on_page(timeout=3000)
        pages.cards.title_cash_after_login.check_text("Транзакции")
        pages.cards.spinner.is_not_on_page(timeout=3000)
        text = pages.trans.sum_trans_first_row.get_text()
        api_post(api_request_context, ser, MC, PENDING, COUNTRY_GB, CURRENCY_USD)
        page.reload()
        pages.cards.spinner.is_on_page(timeout=3000)
        pages.cards.spinner.is_not_on_page(timeout=3000)
        text_second = pages.trans.sum_trans_first_row.get_text()
        assert text != text_second
        pages.trans.first_row.click()
        assert pages.trans.pending_card_transaction.is_on_page(timeout=2500)
        assert page.locator("(//span[contains(text(), 'Международный платеж')])[1]").is_visible()
        assert page.locator("//span[contains(text(), 'Комиссия за международный платеж')]").is_visible()
        assert page.get_by_text("GB").is_visible()
        pages.trans.sum_trans_first_row.check_text("11,61 $ ")

    @allure.title("Send settled transaction")
    def test_send_settled_transaction(self, page: Page, pages: Pages,
                                      steps: Steps, playwright, api_request_context):
        ser = random_numbers()
        page.goto(AUTH_URL)
        api_post(api_request_context, 1, MC, SETTLED, COUNTRY_GB, CURRENCY_USD)
        steps.auth.authorize_in_test(page, USER_RU.login, USER_RU.password, "Счет")
        pages.navigation.navigation_trans_ru.click()
        pages.navigation.navigation_cards_ru.is_not_on_page(timeout=3000)
        pages.cards.title_cash_after_login.check_text("Транзакции")
        text = pages.trans.sum_trans_first_row.get_text()
        api_post(api_request_context, ser, MC, SETTLED, COUNTRY_US, CURRENCY_USD)
        page.reload()
        pages.cards.spinner.is_on_page(timeout=3000)
        pages.cards.spinner.is_not_on_page(timeout=3000)
        text_second = pages.trans.sum_trans_first_row.get_text()
        assert text != text_second
        pages.trans.sum_trans_first_row.check_text(f"{ser},00\xa0$")
        pages.trans.first_row.click()
        assert pages.trans.settled_card_transaction.is_on_page(timeout=2500)

    @allure.title("Send settled fee transaction")
    def test_send_settled_fee_transaction(self, page: Page, pages: Pages,
                                          steps: Steps, playwright, api_request_context):
        ser = 18
        page.goto(AUTH_URL)
        api_post(api_request_context, 1, MC, SETTLED, COUNTRY_GB, CURRENCY_USD)
        steps.auth.authorize_in_test(page, USER_RU.login, USER_RU.password, "Счет")
        pages.navigation.navigation_trans_ru.click()
        pages.navigation.navigation_cards_ru.is_not_on_page(timeout=3000)
        pages.cards.title_cash_after_login.check_text("Транзакции")
        text = pages.trans.sum_trans_first_row.get_text()
        api_post(api_request_context, ser, MC, SETTLED, COUNTRY_GB, CURRENCY_EUR)
        page.reload()
        pages.cards.spinner.is_on_page(timeout=3000)
        pages.cards.spinner.is_not_on_page(timeout=3000)
        text_second = pages.trans.sum_trans_first_row.get_text()
        assert text != text_second
        pages.trans.sum_trans_first_row.check_text('18,87\xa0$')
        pages.trans.first_row.click()
        assert pages.trans.settled_card_transaction.is_on_page(timeout=2500)
        assert page.get_by_text("Конвертировано в").is_visible()
        assert page.get_by_text("1,00 USD = ").is_visible()
        assert page.get_by_text("Комиссия за обмен валюты").is_visible()
        assert page.get_by_text("Комиссия за международный платеж").is_visible()
        pages.trans.sum_trans_on_card_settled.check_text(f"{ser},00\xa0$")

    @allure.title("Send settled fee fx transaction")
    def test_send_settled_fee_another_country(self, page: Page, pages: Pages,
                                              steps: Steps, playwright, api_request_context):
        ser = 5
        page.goto(AUTH_URL)
        api_post(api_request_context, 1, MC, SETTLED, COUNTRY_GB, CURRENCY_USD)
        steps.auth.authorize_in_test(page, USER_RU.login, USER_RU.password, "Счет")
        pages.navigation.navigation_trans_ru.click()
        pages.navigation.navigation_cards_ru.is_not_on_page(timeout=3000)
        pages.cards.title_cash_after_login.check_text("Транзакции")
        text = pages.trans.sum_trans_first_row.get_text()
        api_post(api_request_context, ser, MC, SETTLED, COUNTRY_GB, CURRENCY_USD)
        page.reload()
        pages.cards.spinner.is_on_page(timeout=3000)
        pages.cards.spinner.is_not_on_page(timeout=3000)
        text_second = pages.trans.sum_trans_first_row.get_text()
        assert text != text_second
        pages.trans.first_row.click()
        assert pages.trans.settled_card_transaction.is_on_page(timeout=2500)
        assert page.locator("(//span[contains(text(), 'Международный платеж')])[1]").is_visible()
        assert page.locator("//span[contains(text(), 'Комиссия за международный платеж')]").is_visible()
        assert page.get_by_text("GB").is_visible()
        pages.trans.sum_trans_on_card_settled.check_text(f"{ser},00\xa0$")

    @allure.title("Send refund transaction")
    def test_send_refund_transaction(self, page: Page, pages: Pages,
                                     steps: Steps, playwright, api_request_context):
        ser = random_numbers()
        page.goto(AUTH_URL)
        api_post(api_request_context, 1, MC, SETTLED, COUNTRY_GB, CURRENCY_USD)
        steps.auth.authorize_in_test(page, USER_RU.login, USER_RU.password, "Счет")
        pages.navigation.navigation_trans_ru.click()
        pages.navigation.navigation_cards_ru.is_not_on_page(timeout=3000)
        pages.cards.title_cash_after_login.check_text("Транзакции")
        text = pages.trans.sum_trans_first_row.get_text()
        api_post(api_request_context, ser, MC, REFUND, COUNTRY_US, CURRENCY_USD)
        page.reload()
        pages.cards.spinner.is_on_page(timeout=3000)
        pages.cards.spinner.is_not_on_page(timeout=3000)
        text_second = pages.trans.sum_trans_first_row.get_text()
        assert text != text_second
        pages.trans.sum_trans_first_row.check_text(f"{ser},00\xa0$")
        pages.trans.first_row.click()
        pages.trans.refund_card_transaction.is_on_page(timeout=2500)
        amount = pages.trans.sum_trans_on_card_settled.get_text()
        assert amount == f"{ser},00\xa0$"

    @allure.title("Send refund fee transaction")
    def test_refund_fee_transaction(self, page: Page, pages: Pages,
                                    steps: Steps, playwright, api_request_context):
        ser = 10
        page.goto(AUTH_URL)
        api_post(api_request_context, 1, MC, SETTLED, COUNTRY_GB, CURRENCY_USD)
        steps.auth.authorize_in_test(page, USER_RU.login, USER_RU.password, "Счет")
        pages.navigation.navigation_trans_ru.click()
        pages.navigation.navigation_cards_ru.is_not_on_page(timeout=3000)
        pages.cards.title_cash_after_login.check_text("Транзакции")
        text = pages.trans.sum_trans_first_row.get_text()
        api_request(api_request_context, ser, MC, APPROVED_SUCCES, REFUND, COUNTRY_GB, CURRENCY_EUR)
        page.reload()
        pages.cards.spinner.is_on_page(timeout=3000)
        pages.cards.spinner.is_not_on_page(timeout=3000)
        text_second = pages.trans.sum_trans_first_row.get_text()
        assert text != text_second
        pages.trans.sum_trans_first_row.check_text("10,71 $")
        steps.transactionSteps.check_text_info_popover_content(page, 'Оплата10,00 $Междунар. комиссия0,60 $Конвертация0,11 $')
        pages.trans.first_row.click()
        assert pages.trans.refund_card_transaction.is_on_page(timeout=2500)
        pages.trans.sum_trans_on_card_settled.check_text(f"{ser},00\xa0$")

    @allure.title("Send refund fee fx transactions")
    def test_send_refund_fee_another_country(self, page: Page, pages: Pages,
                                             steps: Steps, playwright, api_request_context):
        ser = 20
        page.goto(AUTH_URL)
        api_post(api_request_context, 1, MC, SETTLED, COUNTRY_GB, CURRENCY_USD)
        steps.auth.authorize_in_test(page, USER_RU.login, USER_RU.password, "Счет")
        pages.navigation.navigation_trans_ru.click()
        pages.navigation.navigation_cards_ru.is_not_on_page(timeout=3000)
        pages.cards.title_cash_after_login.check_text("Транзакции")
        text = pages.trans.sum_trans_first_row.get_text()
        api_request(api_request_context, ser, MC, APPROVED_SUCCES, REFUND, COUNTRY_GB, CURRENCY_EUR)
        page.reload()
        pages.cards.spinner.is_on_page(timeout=3000)
        pages.cards.spinner.is_not_on_page(timeout=3000)
        text_second = pages.trans.sum_trans_first_row.get_text()
        assert text != text_second
        pages.trans.sum_trans_first_row.check_text("20,91 $")
        steps.transactionSteps.check_text_info_popover_content(page,'Оплата20,00 $Междунар. комиссия0,70 $Конвертация0,21 $')
        pages.trans.first_row.click()
        assert pages.trans.refund_card_transaction.is_on_page(timeout=2500)
        assert page.get_by_text("GB").is_visible()
        pages.trans.sum_trans_on_card_settled.check_text(f"{ser},00\xa0$")

    @allure.title("Send reversed transaction")
    def test_reversed_transaction(self, page: Page, pages: Pages,
                                  steps: Steps, playwright, api_request_context):
        ser = 30
        page.goto(AUTH_URL)
        api_post(api_request_context, 1, MC, SETTLED, COUNTRY_GB, CURRENCY_USD)
        steps.auth.authorize_in_test(page, USER_RU.login, USER_RU.password, "Счет")
        pages.navigation.navigation_trans_ru.click()
        pages.navigation.navigation_cards_ru.is_not_on_page(timeout=3000)
        pages.cards.title_cash_after_login.check_text("Транзакции")
        text = pages.trans.sum_trans_first_row.get_text()
        api_request(api_request_context, ser, MC, APPROVED_SUCCES, REVERSAL, COUNTRY_GB, CURRENCY_EUR)
        page.reload()
        pages.cards.spinner.is_on_page(timeout=3000)
        pages.cards.spinner.is_not_on_page(timeout=3000)
        text_second = pages.trans.sum_trans_first_row.get_text()
        assert text != text_second
        pages.trans.sum_trans_first_row.check_text(f"31,11\xa0$")
        steps.transactionSteps.check_text_info_popover_content(page, 'Оплата30,00 $Междунар. комиссия0,80 $Конвертация0,31 $')
        pages.trans.first_row.click()
        assert pages.trans.reversed_card_transaction.is_on_page(timeout=2500)
        pages.trans.sum_trans_on_card_settled.check_text('30,00\xa0$')

    @allure.title("Send reversed fee transaction")
    def test_reversed_fee_transaction(self, page: Page, pages: Pages,
                                      steps: Steps, playwright, api_request_context):
        ser = 15
        page.goto(AUTH_URL)
        api_post(api_request_context, 1, MC, SETTLED, COUNTRY_GB, CURRENCY_USD)
        steps.auth.authorize_in_test(page, USER_RU.login, USER_RU.password, "Счет")
        pages.navigation.navigation_trans_ru.click()
        pages.navigation.navigation_cards_ru.is_not_on_page(timeout=3000)
        pages.cards.title_cash_after_login.check_text("Транзакции")
        text = pages.trans.sum_trans_first_row.get_text()
        api_request(api_request_context, ser, MC, APPROVED_SUCCES, REVERSAL, COUNTRY_GB, CURRENCY_EUR)
        page.reload()
        pages.cards.spinner.is_on_page(timeout=3000)
        pages.cards.spinner.is_not_on_page(timeout=3000)
        text_second = pages.trans.sum_trans_first_row.get_text()
        assert text != text_second
        pages.trans.sum_trans_first_row.check_text("15,81 $")
        steps.transactionSteps.check_text_info_popover_content(page, 'Оплата15,00 $Междунар. комиссия0,65 $Конвертация0,16 $')
        pages.trans.first_row.click()
        assert pages.trans.reversed_card_transaction.is_on_page(timeout=2500)
        pages.trans.sum_trans_on_card_settled.check_text(f"{ser},00\xa0$")

    @allure.title("Send reversed fee fx transaction")
    def test_send_reversed_fee_another_country(self, page: Page, pages: Pages,
                                               steps: Steps, playwright, api_request_context):
        ser = 25
        page.goto(AUTH_URL)
        api_post(api_request_context, 1, MC, SETTLED, COUNTRY_GB, CURRENCY_USD)
        steps.auth.authorize_in_test(page, USER_RU.login, USER_RU.password, "Счет")
        pages.navigation.navigation_trans_ru.click()
        pages.navigation.navigation_cards_ru.is_not_on_page(timeout=3000)
        pages.cards.title_cash_after_login.check_text("Транзакции")
        text = pages.trans.sum_trans_first_row.get_text()
        api_request(api_request_context, ser, MC, APPROVED_SUCCES, REVERSAL, COUNTRY_GB, CURRENCY_EUR)
        page.reload()
        pages.cards.spinner.is_on_page(timeout=3000)
        pages.cards.spinner.is_not_on_page(timeout=3000)
        text_second = pages.trans.sum_trans_first_row.get_text()
        assert text != text_second
        pages.trans.sum_trans_first_row.check_text("26,01 $")
        steps.transactionSteps.check_text_info_popover_content(page, 'Оплата25,00 $Междунар. комиссия0,75 $Конвертация0,26 $')
        pages.trans.first_row.click()
        assert pages.trans.reversed_card_transaction.is_on_page(timeout=2500)
        assert page.get_by_text("GB").is_visible()
        pages.trans.sum_trans_on_card_settled.check_text(f"{ser},00\xa0$")

    @allure.title("Send declined transaction")
    def test_send_declined_transaction(self, page: Page, pages: Pages, steps: Steps, playwright, api_request_context):
        page.goto(AUTH_URL)
        api_post(api_request_context, 40, VISA_TRANS, SETTLED, COUNTRY_GB, CURRENCY_USD)
        steps.auth.authorize_in_test(page, USER_RU.login, USER_RU.password, "Счет")
        pages.navigation.navigation_trans_ru.click()
        pages.navigation.navigation_cards_ru.is_not_on_page(timeout=3000)
        pages.cards.title_cash_after_login.check_text("Транзакции")
        text = pages.trans.sum_trans_first_row.get_text()
        api_post(api_request_context, 40, VISA_TRANS, DECLINED, COUNTRY_GB, CURRENCY_USD)
        page.reload()
        pages.cards.spinner.is_on_page(timeout=3000)
        pages.cards.spinner.is_not_on_page(timeout=3000)
        text_second = pages.trans.sum_decline_first_row.get_text()
        assert text != text_second
        pages.trans.sum_with_fee_decline_first_row.check_text("0,50 $ + 40,00 $")
        steps.transactionSteps.check_text_info_popover_content_decline(page, 'Оплата40,00\xa0$Комиссия за деклайн0,50\xa0$')
        pages.trans.first_row.click()
        assert pages.trans.declined_card_transaction.is_on_page(timeout=2500)
        pages.trans.sum_trans_on_card_settled.check_text('40,00\xa0$')
        assert page.locator("//span[contains(text(), 'Транзакция отклонена')]").is_visible()
        assert page.locator("(//span[contains(text(), 'The transaction was declined for an unknown reason.')])[1]").is_visible()
        assert page.get_by_text('Комиссия за деклайн 0,50 $').is_visible()

    @allure.title("Send declined fee transaction")
    def test_send_declined_fee_transaction(self, page: Page, pages: Pages,
                                       steps: Steps, playwright, api_request_context):
        page.goto(AUTH_URL)
        api_post(api_request_context, 1, VISA_TRANS, SETTLED, COUNTRY_GB, CURRENCY_USD)
        steps.auth.authorize_in_test(page, USER_RU.login, USER_RU.password, "Счет")
        pages.navigation.navigation_trans_ru.click()
        pages.navigation.navigation_cards_ru.is_not_on_page(timeout=3000)
        pages.cards.title_cash_after_login.check_text("Транзакции")
        text = pages.trans.sum_trans_first_row.get_text()
        api_post(api_request_context, 38, VISA_TRANS, DECLINED, COUNTRY_GB, CURRENCY_EUR)
        page.reload()
        pages.cards.spinner.is_on_page(timeout=3000)
        pages.cards.spinner.is_not_on_page(timeout=3000)
        text_second = pages.trans.sum_decline_first_row.get_text()
        assert text != text_second
        pages.trans.sum_with_fee_decline_first_row.check_text("0,50 $ + 38,00 $")
        steps.transactionSteps.check_text_info_popover_content_decline(page, 'Оплата38,00\xa0$Комиссия за деклайн0,50\xa0$')
        pages.trans.first_row.click()
        assert pages.trans.declined_card_transaction.is_on_page(timeout=2500)
        pages.trans.sum_trans_on_card_settled.check_text(f"{38},00\xa0$")
        assert page.locator("//span[contains(text(), 'Транзакция отклонена')]").is_visible()
        assert page.locator("(//span[contains(text(), 'The transaction was declined for an unknown reason.')])[1]").is_visible()
        assert page.get_by_text('Комиссия за деклайн 0,50 $').is_visible()

    @allure.title("Send declined fee fx transaction")
    def test_send_declined_fee_another_country(self, page: Page, pages: Pages,
                                           steps: Steps, playwright, api_request_context):
        page.goto(AUTH_URL)
        api_post(api_request_context, 1, VISA_TRANS, SETTLED, COUNTRY_GB, CURRENCY_USD)
        steps.auth.authorize_in_test(page, USER_RU.login, USER_RU.password, "Счет")
        pages.navigation.navigation_trans_ru.click()
        pages.navigation.navigation_cards_ru.is_not_on_page(timeout=3000)
        pages.cards.title_cash_after_login.check_text("Транзакции")
        text = pages.trans.sum_trans_first_row_spend_trans.get_text()
        api_post(api_request_context, 18, VISA_TRANS, DECLINED, COUNTRY_GB, CURRENCY_USD)
        page.reload()
        pages.cards.spinner.is_on_page(timeout=3000)
        pages.cards.spinner.is_not_on_page(timeout=3000)
        text_second = pages.trans.sum_decline_first_row.get_text()
        assert text != text_second
        pages.trans.sum_with_fee_decline_first_row.check_text("0,50 $ + 18,00 $")
        steps.transactionSteps.check_text_info_popover_content_decline(page, 'Оплата18,00\xa0$Комиссия за деклайн0,50\xa0$')
        pages.trans.first_row.click()
        assert pages.trans.declined_card_transaction.is_on_page(timeout=2500)
        pages.trans.sum_trans_on_card_settled.check_text(f"{18},00\xa0$")
        assert page.locator("//span[contains(text(), 'Транзакция отклонена')]").is_visible()
        assert page.locator("(//span[contains(text(), 'The transaction was declined for an unknown reason.')])[1]").is_visible()
        assert page.get_by_text('Комиссия за деклайн 0,50 $').is_visible()

    @allure.title("Check transaction page employee")
    def test_check_transaction_page_employee(self, page: Page, pages: Pages,
                                         steps: Steps, playwright, api_request_context):
        page.goto(AUTH_URL_ALL_TIME_EMPLOYEE)
        steps.auth.authorize_in_test(page, USER_DATA_RU_EMPLOYEE.login, USER_DATA_RU_EMPLOYEE.password, 'Карты')
        pages.navigation.navigation_trans_ru.click()
        pages.trans.btn_export.is_on_page(timeout=3500)
        pages.onboard.title_cash_after_login.check_text('Транзакции')
        assert pages.trans.filter_trans.is_visible()
        expect(page.locator("//div[contains(text(), '12 транзакций')]")).to_be_visible()
        assert pages.trans.btn_status_ru.is_visible()
        assert page.locator("//span[contains(text(), 'Карта')]").is_visible()
        steps.universalSteps.check_one_row_in_table(page, '1', "Дата и времяТранзакцияСтатусПользовательКартаЗатраты")

    @allure.title("Check first row employee")
    def test_check_first_row_employee(self, page: Page, pages: Pages,
                                  steps: Steps, playwright, api_request_context):
        page.goto(AUTH_URL_ALL_TIME_EMPLOYEE)
        steps.auth.authorize_in_test(page, USER_DATA_RU_EMPLOYEE.login, USER_DATA_RU_EMPLOYEE.password, 'Карты')
        pages.navigation.navigation_trans_ru.click()
        pages.trans.btn_export.is_on_page(timeout=3000)
        pages.trans.first_row.check_text('22 апр. 2024 г., 17:13FACEBK ADSPendinginvated emploee••6070 657671,00 $')

    @allure.title("Check amount row employee")
    def test_check_amount_rows_employee(self, page: Page, pages: Pages,
                                    steps: Steps, playwright):
        page.goto(AUTH_URL_ALL_TIME_EMPLOYEE)
        steps.auth.authorize_in_test(page, USER_DATA_RU_EMPLOYEE.login, USER_DATA_RU_EMPLOYEE.password, 'Карты')
        pages.navigation.navigation_trans_ru.click()
        pages.trans.btn_export.is_on_page(timeout=3000)
        expect(page.locator("//tr[contains(@class, 'hover-visible-container')]")).to_have_count(12)

    @allure.title("Check all transactions page employee")
    def test_check_all_transactions_employee(self, page: Page, pages: Pages,
                                         steps: Steps, playwright):
        page.goto(AUTH_URL_ALL_TIME_EMPLOYEE)
        steps.auth.authorize_in_test(page, USER_DATA_RU_EMPLOYEE.login, USER_DATA_RU_EMPLOYEE.password, 'Карты')
        pages.navigation.navigation_trans_ru.click()
        pages.trans.btn_export.is_on_page(timeout=3000)
        steps.transactionSteps.check_all_row_transactions_employee(page)

    @allure.title("Check modal pending transaction")
    def test_check_modal_transaction(self, page: Page, pages: Pages, steps: Steps, playwright):
        page.goto(AUTH_URL_ALL_TIME_EMPLOYEE)
        steps.auth.authorize_in_test(page, USER_DATA_RU_EMPLOYEE.login, USER_DATA_RU_EMPLOYEE.password, 'Карты')
        pages.navigation.navigation_trans_ru.click()
        pages.trans.btn_export.is_on_page(timeout=3000)
        pages.trans.first_row.click()
        sleep(1)
        pages.trans.sum_trans_on_card_pending.check_text('1,00\xa0$')
        pages.trans.number_card_on_card.check_text('••6070 65767invated emploee22 апр. 2024 г., 17:13')
        pages.trans.ads_trans_on_card.check_text('Facebook-devPending')
        assert pages.trans.pending_card_transaction.is_visible()
        pages.trans.description_modal_trans.check_text('ОписаниеFACEBK ADS')
        pages.trans.country_modal_trans.check_text('СтранаUS')
        pages.trans.currency_modal_trans.check_text('ВалютаUSD')
        pages.trans.mcc_modal_trans.check_text('MCC7311')
        pages.trans.transaction_id_modal_trans.check_text('ID транзакции4154')

    @allure.title("Send settled transaction employee")
    def test_send_settled_transaction(self, page: Page, pages: Pages,
                                  steps: Steps, playwright, api_request_context):
        ser = random_numbers()
        page.goto(AUTH_URL)
        api_post(api_request_context, 1.7, CARD_EMPLOYEE, SETTLED, COUNTRY_US, CURRENCY_USD)
        steps.auth.authorize_in_test(page, USER_UK.login, USER_UK.password, 'Картки')
        pages.navigation.navigation_trans_uk.click()
        sleep(1)
        text = pages.trans.sum_trans_first_row.get_text()
        api_post(api_request_context, ser, CARD_EMPLOYEE, SETTLED, COUNTRY_US, CURRENCY_USD)
        page.reload()
        pages.cards.spinner.is_on_page(timeout=3000)
        pages.cards.spinner.is_not_on_page(timeout=3000)
        text_after = pages.trans.sum_trans_first_row.get_text()
        assert text != text_after
        pages.trans.first_row.click()
        assert pages.trans.settled_card_transaction.is_on_page(timeout=2500)
        pages.trans.sum_trans_on_card_settled.check_text(f"{ser},00\xa0$")

    @allure.title("Check time freeze auth")
    def test_check_auth_freeze_time(self, page: Page, pages: Pages, steps: Steps, playwright, api_request_context):
        api_post_auth_trans(api_request_context, 1004, VISA_TEST, '{"approved":true}')
        sleep(2)
        api_post_auth_trans(api_request_context, 50, VISA_TEST, '{"approved":false}')
        sleep(14)
        api_post_auth_trans(api_request_context, 75, VISA_TEST, '{"approved":true}')

    @allure.title("Check sum balance if some auth with time")
    def test_check_auth_sum(self, page: Page, pages: Pages, steps: Steps, playwright, api_request_context):
        api_post_auth_trans(api_request_context, 1000, VISA_TEST, '{"approved":true}')
        api_post_auth_trans(api_request_context, 2, VISA_TEST, '{"approved":true}')
        api_post_auth_trans(api_request_context, 1, VISA_TEST, '{"approved":true}')
        api_post_auth_trans(api_request_context, 1, VISA_TEST, '{"approved":true}')
        api_post_auth_trans(api_request_context, 1, VISA_TEST, '{"approved":false}')

    @allure.title("Checking the display of transaction status changes auth pending refund")
    def test_check_change_status_auth_pending_refund(self, page: Page, pages: Pages, steps: Steps, playwright, api_request_context):
        n = random_numbers()
        page.goto("https://dev.app.devhost.io/transactions")
        steps.auth.authorize_in_test(page, USER_RU.login, USER_RU.password, 'Транзакции')
        pages.trans.first_row.click()
        id_old_trans = pages.trans.id_trans.get_text()
        token = api_post_auth_trans(api_request_context, n, VISA_TRANS, '{"approved":true}')
        api_post_pending_with_auth(api_request_context, token, n, VISA_TRANS, PENDING, COUNTRY_US, CURRENCY_USD)
        page.reload()
        sleep(3)
        pages.trans.first_row.click()
        id_new_trans = pages.trans.id_trans.get_text()
        assert id_old_trans < id_new_trans
        assert pages.trans.pending_card_transaction.is_visible()
        pages.trans.sum_trans_on_card_pending.check_text(f"{n},00\xa0$")
        api_post_with_auth(api_request_context, token, n, VISA_TRANS, REFUND, COUNTRY_US, CURRENCY_USD)
        page.reload()
        sleep(3.5)
        pages.trans.first_row.click()
        id_refund_trans = pages.trans.id_trans.get_text()
        pages.trans.sum_trans_on_card_pending.check_text(f"{n},00\xa0$")
        assert id_refund_trans > id_new_trans

    @allure.title("Checking the display of transaction status changes pending refund settled")
    def test_auth_pending_refund_settled(self, page: Page, pages: Pages, steps: Steps, playwright, api_request_context):
        n = random_numbers()
        page.goto("https://dev.app.devhost.io/transactions")
        steps.auth.authorize_in_test(page, USER_RU.login, USER_RU.password, 'Транзакции')
        pages.trans.first_row.click()
        id_old_trans = pages.trans.id_trans.get_text()
        token = api_post_auth_trans(api_request_context, n, VISA_TRANS, '{"approved":true}')
        api_post_pending_with_auth(api_request_context, token, n, VISA_TRANS, PENDING, COUNTRY_US, CURRENCY_USD)
        page.reload()
        sleep(3)
        pages.trans.first_row.click()
        id_new_trans = pages.trans.id_trans.get_text()
        assert id_old_trans < id_new_trans
        assert pages.trans.pending_card_transaction.is_visible()
        pages.trans.sum_trans_on_card_pending.check_text(f"{n},00\xa0$")
        api_post_with_auth(api_request_context, token, n, VISA_TRANS, REFUND, COUNTRY_US, CURRENCY_USD)
        page.reload()
        sleep(3)
        pages.trans.first_refund_in_table.click()
        id_refund_trans = pages.trans.id_trans.get_text()
        pages.trans.sum_trans_on_card_pending.check_text(f"{n},00\xa0$")
        assert id_refund_trans > id_new_trans
        assert pages.trans.refund_card_transaction.is_visible()
        api_post_with_auth(api_request_context, token, n, VISA_TRANS, SETTLED, COUNTRY_US, CURRENCY_USD)
        page.reload()
        sleep(3)
        pages.trans.first_settled_in_table.click()
        id_settled_trans = pages.trans.id_trans.get_text()
        pages.trans.sum_trans_on_card_pending.check_text(f"{n},00\xa0$")
        assert pages.trans.settled_card_transaction.is_visible()
        assert id_settled_trans == id_new_trans

    @allure.title("Checking the display of transaction status changes auth pending reversed")
    def test_auth_pending_reversed(self, page: Page, pages: Pages, steps: Steps, playwright, api_request_context):
        n = random_numbers()
        page.goto("https://dev.app.devhost.io/transactions")
        steps.auth.authorize_in_test(page, USER_RU.login, USER_RU.password, 'Транзакции')
        pages.trans.first_row.click()
        id_old_trans = pages.trans.id_trans.get_text()
        token = api_post_auth_trans(api_request_context, n, VISA_TRANS, '{"approved":true}')
        api_post_pending_with_auth(api_request_context, token, n, VISA_TRANS, PENDING, COUNTRY_US, CURRENCY_USD)
        page.reload()
        pages.cards.spinner.is_not_on_page(timeout=3000)
        pages.trans.first_row.click()
        id_new_trans = pages.trans.id_trans.get_text()
        assert id_old_trans < id_new_trans
        assert pages.trans.pending_card_transaction.is_visible()
        pages.trans.sum_trans_on_card_pending.check_text(f"{n},00\xa0$")
        api_post_with_auth(api_request_context, token, n, VISA_TRANS, REVERSAL, COUNTRY_US, CURRENCY_USD)
        page.reload()
        sleep(3)
        pages.trans.first_row.click()
        id_reversed_trans = pages.trans.id_trans.get_text()
        assert id_reversed_trans == id_new_trans
        pages.trans.sum_trans_on_card_pending.check_text(f"{n},00\xa0$")
        assert pages.trans.reversed_card_transaction.is_visible()

    @allure.title("Checking the display of transaction status changes auth pending reversed settled")
    def test_auth_pending_reversed_settled(self, page: Page, pages: Pages, steps: Steps, playwright, api_request_context):
        n = random_numbers()
        page.goto("https://dev.app.devhost.io/transactions")
        steps.auth.authorize_in_test(page, USER_RU.login, USER_RU.password, 'Транзакции')
        pages.trans.first_row.click()
        id_old_trans = pages.trans.id_trans.get_text()
        token = api_post_auth_trans(api_request_context, n, VISA_TRANS, '{"approved":true}')
        api_post_pending_with_auth(api_request_context, token, n, VISA_TRANS, PENDING, COUNTRY_US, CURRENCY_USD)
        page.reload()
        pages.cards.spinner.is_not_on_page(timeout=3000)
        pages.trans.first_row.click()
        id_new_trans = pages.trans.id_trans.get_text()
        assert id_old_trans < id_new_trans
        assert pages.trans.pending_card_transaction.is_visible()
        pages.trans.sum_trans_on_card_pending.check_text(f"{n},00\xa0$")
        api_post_with_auth(api_request_context, token, n, VISA_TRANS, REVERSAL, COUNTRY_US, CURRENCY_USD)
        page.reload()
        sleep(3)
        pages.trans.first_row.click()
        id_reversed_trans = pages.trans.id_trans.get_text()
        assert id_reversed_trans == id_new_trans
        pages.trans.sum_trans_on_card_pending.check_text(f"{n},00\xa0$")
        assert pages.trans.reversed_card_transaction.is_visible()
        api_post_with_auth(api_request_context, token, n, VISA_TRANS, SETTLED, COUNTRY_US, CURRENCY_USD)
        page.reload()
        sleep(3)
        pages.trans.first_row.click()
        id_settled_trans = pages.trans.id_trans.get_text()
        pages.trans.sum_trans_on_card_pending.check_text(f"{n},00\xa0$")
        assert pages.trans.settled_card_transaction.is_visible()
        assert id_settled_trans == id_new_trans

    @allure.title("Checking the display of transaction status changes auth pending settled")
    def test_auth_pending_settled(self, page: Page, pages: Pages, steps: Steps, playwright, api_request_context):
        n = random_numbers()
        page.goto("https://dev.app.devhost.io/transactions")
        steps.auth.authorize_in_test(page, USER_RU.login, USER_RU.password, 'Транзакции')
        pages.trans.first_row.click()
        id_old_trans = pages.trans.id_trans.get_text()
        token = api_post_auth_trans(api_request_context, n, VISA_TRANS, '{"approved":true}')
        api_post_pending_with_auth(api_request_context, token, n, VISA_TRANS, PENDING, COUNTRY_US, CURRENCY_USD)
        page.reload()
        sleep(3)
        pages.trans.first_row.click()
        id_new_trans = pages.trans.id_trans.get_text()
        assert id_old_trans < id_new_trans
        assert pages.trans.pending_card_transaction.is_visible()
        pages.trans.sum_trans_on_card_pending.check_text(f"{n},00\xa0$")
        api_post_with_auth(api_request_context, token, n, VISA_TRANS, SETTLED, COUNTRY_US, CURRENCY_USD)
        page.reload()
        sleep(3)
        pages.trans.first_row.click()
        id_settled_trans = pages.trans.id_trans.get_text()
        pages.trans.sum_trans_on_card_pending.check_text(f"{n},00\xa0$")
        assert pages.trans.settled_card_transaction.is_visible()
        assert id_settled_trans == id_new_trans

    @allure.title("Checking the display of transaction status changes auth pending settled refund")
    def test_auth_pending_settled_refund(self, page: Page, pages: Pages, steps: Steps, playwright, api_request_context):
        n = random_numbers()
        page.goto("https://dev.app.devhost.io/transactions")
        steps.auth.authorize_in_test(page, USER_RU.login, USER_RU.password, 'Транзакции')
        pages.trans.first_row.click()
        id_old_trans = pages.trans.id_trans.get_text()
        token = api_post_auth_trans(api_request_context, n, VISA_TRANS, '{"approved":true}')
        api_post_pending_with_auth(api_request_context, token, n, VISA_TRANS, PENDING, COUNTRY_US, CURRENCY_USD)
        page.reload()
        sleep(3)
        pages.trans.first_row.click()
        id_new_trans = pages.trans.id_trans.get_text()
        assert id_old_trans < id_new_trans
        assert pages.trans.pending_card_transaction.is_visible()
        pages.trans.sum_trans_on_card_pending.check_text(f"{n},00\xa0$")
        api_post_with_auth(api_request_context, token, n, VISA_TRANS, SETTLED, COUNTRY_US, CURRENCY_USD)
        page.reload()
        sleep(3)
        pages.trans.first_row.click()
        id_settled_trans = pages.trans.id_trans.get_text()
        pages.trans.sum_trans_on_card_pending.check_text(f"{n},00\xa0$")
        assert pages.trans.settled_card_transaction.is_visible()
        assert id_settled_trans == id_new_trans
        api_post_with_auth(api_request_context, token, n, VISA_TRANS, REFUND, COUNTRY_US, CURRENCY_USD)
        page.reload()
        sleep(3)
        pages.trans.first_refund_in_table.click()
        id_refund_trans = pages.trans.id_trans.get_text()
        pages.trans.sum_trans_on_card_pending.check_text(f"{n},00\xa0$")
        assert id_refund_trans > id_new_trans
        assert pages.trans.refund_card_transaction.is_visible()

    @allure.title("Checking the display of transaction status changes auth pending settled reversed")
    def test_auth_pending_settled_reversed(self, page: Page, pages: Pages, steps: Steps, playwright, api_request_context):
        n = random_numbers()
        page.goto("https://dev.app.devhost.io/transactions")
        steps.auth.authorize_in_test(page, USER_RU.login, USER_RU.password, 'Транзакции')
        pages.trans.first_row.click()
        id_old_trans = pages.trans.id_trans.get_text()
        token = api_post_auth_trans(api_request_context, n, VISA_TRANS, '{"approved":true}')
        api_post_pending_with_auth(api_request_context, token, n, VISA_TRANS, PENDING, COUNTRY_US, CURRENCY_USD)
        page.reload()
        sleep(3)
        pages.trans.first_row.click()
        id_new_trans = pages.trans.id_trans.get_text()
        assert id_old_trans < id_new_trans
        assert pages.trans.pending_card_transaction.is_visible()
        pages.trans.sum_trans_on_card_pending.check_text(f"{n},00\xa0$")
        api_post_with_auth(api_request_context, token, n, VISA_TRANS, SETTLED, COUNTRY_US, CURRENCY_USD)
        page.reload()
        sleep(3)
        pages.trans.first_row.click()
        id_settled_trans = pages.trans.id_trans.get_text()
        pages.trans.sum_trans_on_card_pending.check_text(f"{n},00\xa0$")
        assert pages.trans.settled_card_transaction.is_visible()
        assert id_settled_trans == id_new_trans
        api_post_with_auth(api_request_context, token, n, VISA_TRANS, REVERSAL, COUNTRY_US, CURRENCY_USD)
        page.reload()
        sleep(3)
        pages.trans.first_row.click()
        id_reversed_trans = pages.trans.id_trans.get_text()
        assert id_reversed_trans == id_new_trans
        pages.trans.sum_trans_on_card_pending.check_text(f"{n},00\xa0$")
        assert pages.trans.settled_card_transaction.is_visible()

    @allure.title("Checking the display of transaction status changes auth reversed")
    def test_auth_reversed(self, page: Page, pages: Pages, steps: Steps, playwright, api_request_context):
        n = random_numbers()
        page.goto("https://dev.app.devhost.io/transactions")
        steps.auth.authorize_in_test(page, USER_RU.login, USER_RU.password, 'Транзакции')
        pages.trans.first_row.click()
        id_old_trans = pages.trans.id_trans.get_text()
        token = api_post_auth_trans(api_request_context, n, VISA_TRANS, '{"approved":true}')
        api_post_with_auth(api_request_context, token, n, VISA_TRANS, REVERSAL, COUNTRY_US, CURRENCY_USD)
        page.reload()
        sleep(3)
        pages.trans.first_row.click()
        id_reversed_trans = pages.trans.id_trans.get_text()
        assert id_reversed_trans > id_old_trans
        pages.trans.sum_trans_on_card_pending.check_text(f"{n},00\xa0$")
        assert pages.trans.reversed_card_transaction.is_visible()

    @allure.title("Checking the display of transaction status changes auth reversed pending")
    def test_auth_reversed_pending(self, page: Page, pages: Pages, steps: Steps, playwright, api_request_context):
        n = random_numbers()
        page.goto("https://dev.app.devhost.io/transactions")
        steps.auth.authorize_in_test(page, USER_RU.login, USER_RU.password, 'Транзакции')
        pages.trans.first_row.click()
        id_old_trans = pages.trans.id_trans.get_text()
        token = api_post_auth_trans(api_request_context, n, VISA_TRANS, '{"approved":true}')
        api_post_with_auth(api_request_context, token, n, VISA_TRANS, REVERSAL, COUNTRY_US, CURRENCY_USD)
        page.reload()
        sleep(3)
        pages.trans.first_row.click()
        id_reversed_trans = pages.trans.id_trans.get_text()
        assert id_reversed_trans > id_old_trans
        pages.trans.sum_trans_on_card_pending.check_text(f"{n},00\xa0$")
        assert pages.trans.reversed_card_transaction.is_visible()
        api_post_pending_with_auth(api_request_context, token, n, VISA_TRANS, PENDING, COUNTRY_US, CURRENCY_USD)
        page.reload()
        sleep(3)
        pages.trans.first_row.click()
        id_new_trans = pages.trans.id_trans.get_text()
        assert id_reversed_trans == id_new_trans
        assert pages.trans.reversed_card_transaction.is_visible()
        pages.trans.sum_trans_on_card_pending.check_text(f"{n},00\xa0$")

    @allure.title("Checking the display of transaction status changes auth settled")
    def test_auth_settled(self, page: Page, pages: Pages, steps: Steps, playwright, api_request_context):
        n = random_numbers()
        page.goto("https://dev.app.devhost.io/transactions")
        steps.auth.authorize_in_test(page, USER_RU.login, USER_RU.password, 'Транзакции')
        pages.trans.first_row.click()
        id_old_trans = pages.trans.id_trans.get_text()
        token = api_post_auth_trans(api_request_context, n, VISA_TRANS, '{"approved":true}')
        api_post_with_auth(api_request_context, token, n, VISA_TRANS, SETTLED, COUNTRY_US, CURRENCY_USD)
        page.reload()
        sleep(3)
        pages.trans.first_row.click()
        id_settled_trans = pages.trans.id_trans.get_text()
        pages.trans.sum_trans_on_card_pending.check_text(f"{n},00\xa0$")
        assert pages.trans.settled_card_transaction.is_visible()
        assert id_settled_trans > id_old_trans

    @allure.title("Checking the display of transaction status changes auth settled pending")
    def test_auth_settled_pending(self, page: Page, pages: Pages, steps: Steps, playwright, api_request_context):
        n = random_numbers()
        page.goto("https://dev.app.devhost.io/transactions")
        steps.auth.authorize_in_test(page, USER_RU.login, USER_RU.password, 'Транзакции')
        pages.trans.first_row.click()
        id_old_trans = pages.trans.id_trans.get_text()
        token = api_post_auth_trans(api_request_context, n, VISA_TRANS, '{"approved":true}')
        api_post_with_auth(api_request_context, token, n, VISA_TRANS, SETTLED, COUNTRY_US, CURRENCY_USD)
        page.reload()
        sleep(3)
        pages.trans.first_row.click()
        id_settled_trans = pages.trans.id_trans.get_text()
        pages.trans.sum_trans_on_card_pending.check_text(f"{n},00\xa0$")
        assert pages.trans.settled_card_transaction.is_visible()
        assert id_settled_trans > id_old_trans
        api_post_with_auth(api_request_context, token, n, VISA_TRANS, PENDING, COUNTRY_US, CURRENCY_USD)
        page.reload()
        sleep(3)
        pages.trans.first_row.click()
        id_pending_trans = pages.trans.id_trans.get_text()
        assert id_settled_trans == id_pending_trans
        assert pages.trans.settled_card_transaction.is_visible()

    @allure.title("Check metric widgets of transactions admin")
    def test_check_metric_widgets_transactions_admin(self, page: Page, pages: Pages, steps: Steps, playwright, api_request_context):
        page.goto("https://dev.app.devhost.io/transactions?dateRange=allTime&page=1")
        steps.auth.authorize_in_test(page, USER_DATA_RU.login, USER_DATA_RU.password, 'Транзакции')
        expect(page.locator("//div[contains(text(), 'Транзакции')]")).to_be_visible()
        pages.trans.widget_sum_trans.check_text('56')
        assert pages.trans.widget_sum_trans_graph.is_visible()

        expect(page.locator("//div[contains(text(), 'Затраты')]")).to_be_visible()
        pages.trans.widget_sum_spend.check_text('$262.55')
        assert pages.trans.widget_sum_spend_graph.is_visible()

        expect(page.locator("//div[contains(text(), 'Отклоненные транзакции')]")).to_be_visible()
        pages.trans.widget_count_trans_declined.check_text('2')
        assert pages.trans.widget_count_trans_declined_graph.is_visible()

        expect(page.locator("//div[contains(text(), 'Отклонено')]")).to_be_visible()
        pages.trans.widget_sum_trans_declined.check_text('$22.00')
        assert pages.trans.widget_sum_trans_declined_graph.is_visible()

        assert pages.trans.widget_title_decline_rate.is_visible()
        pages.trans.widget_trans_decline_rate.check_text('4.2%')
        assert pages.trans.widget_trans_decline_rate_graph.is_visible()

    @allure.title("Check metric widgets of transactions employee")
    def test_check_metric_widgets_transactions_employee(self, page: Page, pages: Pages, steps: Steps, playwright, api_request_context):
        page.goto("https://dev.app.devhost.io/transactions?dateRange=allTime&page=1")
        steps.auth.authorize_in_test(page, USER_DATA_RU_EMPLOYEE.login, USER_DATA_RU_EMPLOYEE.password, 'Транзакции')
        expect(page.locator("//div[contains(text(), 'Транзакции')]")).to_be_visible()
        pages.trans.widget_sum_trans.check_text('12')
        assert pages.trans.widget_sum_trans_graph.is_visible()

        expect(page.locator("//div[contains(text(), 'Затраты')]")).to_be_visible()
        pages.trans.widget_sum_spend.check_text('$13.00')
        assert pages.trans.widget_sum_spend_graph.is_visible()

        expect(page.locator("//div[contains(text(), 'Отклоненные транзакции')]")).to_be_visible()
        pages.trans.widget_count_trans_declined.check_text('0')
        assert pages.trans.widget_count_trans_declined_graph.is_visible()

        expect(page.locator("//div[contains(text(), 'Отклонено')]")).to_be_visible()
        pages.trans.widget_sum_trans_declined.check_text('$0.00')
        assert pages.trans.widget_sum_trans_declined_graph.is_visible()

        assert pages.trans.widget_title_decline_rate.is_visible()
        pages.trans.widget_trans_decline_rate.check_text('0.0%')
        assert pages.trans.widget_trans_decline_rate_graph.is_visible()

    @allure.title("Check metric widgets of transactions DR filter by user")
    def test_check_metric_widgets_transactions_filter_by_user(self, page: Page, pages: Pages, steps: Steps, playwright, api_request_context):
        page.goto("https://dev.app.devhost.io/transactions?dateRange=allTime&page=1")
        steps.auth.authorize_in_test(page, USER_DATA_RU.login, USER_DATA_RU.password, 'Транзакции')
        assert pages.trans.widget_title_decline_rate.is_visible()
        pages.trans.widget_trans_decline_rate.check_text('4.2%')
        assert pages.trans.widget_trans_decline_rate_graph.is_visible()

        pages.trans.btn_user_ru.click()
        page.locator("//*[@data-test-id='checkbox']//span[contains(text(), 'test do not change')]").click()
        expect(page.locator('//*[@data-test-id="tag"]')).to_have_text('test do not change')

        pages.trans.widget_trans_decline_rate.check_text('5.6%')
        assert pages.trans.widget_trans_decline_rate_graph.is_visible()

        pages.trans.widget_sum_trans.check_text('44')
        assert pages.trans.widget_sum_spend_graph.is_visible()
        assert pages.trans.widget_count_trans_declined_graph.is_visible()
        assert pages.trans.widget_sum_trans_declined_graph.is_visible()
        assert pages.trans.widget_trans_decline_rate_graph.is_visible()
        expect(page.locator("//div[contains(@class, 'display_flex justify-content_space-between gap_4')]//span[contains(text(), '$249.55')]")).to_have_css("color", "rgb(20, 21, 26)")

    @allure.title("Check color of DR, decline transactions")
    def test_check_color_dr_decline_transactions(self, page: Page, pages: Pages, steps: Steps, playwright, api_request_context):
        page.goto("https://dev.app.devhost.io/transactions?dateRange=allTime&page=1")
        steps.auth.authorize_in_test(page, USER_DATA_RU.login, USER_DATA_RU.password, "Транзакции ")
        assert pages.trans.widget_title_decline_rate.is_visible()
        expect(page.locator("//div[contains(@class, 'display_flex justify-content_space-between gap_4')]//span[text()= '4.2%']")).to_have_css("color", "rgb(20, 21, 26)")
        pages.trans.btn_status_ru.click()
        page.locator("//*[@data-test-id='checkbox']//span[contains(text(), 'Declined')]").click()
        pages.trans.btn_status_ru.click()
        expect(page.locator("(//span[contains(text(), 'Declined')])[1]/ancestor::div[@data-test-id='badge']/*[@data-test-id='pip']")).to_have_css("color", "rgb(230, 72, 61)")
        expect(page.locator("(//*[@data-test-id='info-popover-activator']//span)[4]")).to_have_css("color", "rgb(230, 72, 61)")
        expect(page.locator("(//*[@data-test-id='info-popover-activator']//span)[3]")).to_have_css("color", "rgb(20, 21, 26)")
        pages.trans.widget_trans_decline_rate.check_text('—')
        pages.trans.widget_sum_trans_declined.check_text('$22.00')
        pages.trans.widget_count_trans_declined.check_text('2')
        pages.trans.widget_sum_spend.check_text('$1.00')
        pages.trans.widget_sum_trans.check_text('2')

        assert pages.trans.widget_sum_trans_graph.is_visible()
        assert pages.trans.widget_sum_spend_graph.is_visible()
        assert pages.trans.widget_count_trans_declined_graph.is_visible()
        assert pages.trans.widget_sum_trans_declined_graph.is_visible()
        assert pages.trans.widget_trans_decline_rate_graph.is_not_on_page()

    @allure.title("Check color of settled transactions")
    def test_check_color_of_settled_transactions(self, page: Page, pages: Pages, steps: Steps, playwright, api_request_context):
        page.goto("https://dev.app.devhost.io/transactions?dateRange=allTime&page=1")
        steps.auth.authorize_in_test(page, USER_DATA_RU.login, USER_DATA_RU.password, "Транзакции ")
        assert pages.trans.widget_title_decline_rate.is_visible()
        pages.trans.widget_sum_trans_declined.check_text("$22.00")
        pages.trans.btn_status_ru.click()
        page.locator("//*[@data-test-id='checkbox']//span[contains(text(), 'Settled')]").click()
        pages.trans.btn_status_ru.click()
        expect(page.locator("(//span[contains(text(), 'Settled')])[1]/ancestor::div[@data-test-id='badge']/*[@data-test-id='pip']")).to_have_css("color", "rgb(111, 198, 87)")
        pages.trans.widget_trans_decline_rate.check_text('—')
        pages.trans.widget_sum_trans_declined.check_text('$0.00')
        pages.trans.widget_count_trans_declined.check_text('0')
        pages.trans.widget_sum_spend.check_text('$208.19')
        pages.trans.widget_sum_trans.check_text('17')
        assert pages.trans.widget_sum_trans_graph.is_visible()
        assert pages.trans.widget_sum_spend_graph.is_visible()
        assert pages.trans.widget_count_trans_declined_graph.is_visible()
        assert pages.trans.widget_sum_trans_declined_graph.is_visible()
        assert pages.trans.widget_trans_decline_rate_graph.is_not_on_page()

    @allure.title("Check color of pending transactions")
    def test_check_color_of_pending_transactions(self, page: Page, pages: Pages, steps: Steps, playwright, api_request_context):
        page.goto("https://dev.app.devhost.io/transactions?dateRange=allTime&page=1")
        steps.auth.authorize_in_test(page, USER_DATA_RU.login, USER_DATA_RU.password, "Транзакции ")
        pages.trans.widget_trans_decline_rate.check_text('4.2%')
        pages.trans.btn_status_ru.click()
        page.locator("//*[@data-test-id='checkbox']//span[contains(text(), 'Pending')]").click()
        pages.trans.btn_status_ru.click()
        expect(page.locator("(//span[contains(text(), 'Pending')])[1]/ancestor::div[@data-test-id='badge']/*[@data-test-id='pip']")).to_have_css("color", "rgba(20, 21, 26, 0.6)")
        pages.trans.widget_trans_decline_rate.check_text('—')
        pages.trans.widget_sum_trans_declined.check_text('$0.00')
        pages.trans.widget_count_trans_declined.check_text('0')
        pages.trans.widget_sum_spend.check_text('$101.00')
        pages.trans.widget_sum_trans.check_text('26')
        assert pages.trans.widget_sum_trans_graph.is_visible()
        assert pages.trans.widget_sum_spend_graph.is_visible()
        assert pages.trans.widget_count_trans_declined_graph.is_visible()
        assert pages.trans.widget_sum_trans_declined_graph.is_visible()
        assert pages.trans.widget_trans_decline_rate_graph.is_not_on_page()

    @allure.title("Check color of reversed transactions")
    def test_check_color_of_reversed_transactions(self, page: Page, pages: Pages, steps: Steps, playwright, api_request_context):
        page.goto("https://dev.app.devhost.io/transactions?dateRange=allTime&page=1")
        steps.auth.authorize_in_test(page, USER_DATA_RU.login, USER_DATA_RU.password, "Транзакции ")
        pages.trans.widget_trans_decline_rate.check_text('4.2%')
        pages.trans.btn_status_ru.click()
        page.locator("//*[@data-test-id='checkbox']//span[contains(text(), 'Reversed')]").click()
        pages.trans.btn_status_ru.click()
        expect(page.locator("(//span[contains(text(), 'Reversed')])[1]/ancestor::div[@data-test-id='badge']/*[@data-test-id='pip']")).to_have_css("color", "rgb(253, 176, 34)")
        pages.trans.widget_trans_decline_rate.check_text('—')
        pages.trans.widget_sum_trans_declined.check_text('$0.00')
        pages.trans.widget_count_trans_declined.check_text('0')
        pages.trans.widget_sum_spend.check_text('$0.00')
        pages.trans.widget_sum_trans.check_text('3')
        assert pages.trans.widget_sum_trans_graph.is_visible()
        assert pages.trans.widget_sum_spend_graph.is_visible()
        assert pages.trans.widget_count_trans_declined_graph.is_visible()
        assert pages.trans.widget_sum_trans_declined_graph.is_visible()
        assert pages.trans.widget_trans_decline_rate_graph.is_not_on_page()

    @allure.title("Check color of refund transactions")
    def test_check_color_of_refund_transactions(self, page: Page, pages: Pages, steps: Steps, playwright, api_request_context):
        page.goto("https://dev.app.devhost.io/transactions?dateRange=allTime&page=1")
        steps.auth.authorize_in_test(page, USER_DATA_RU.login, USER_DATA_RU.password, "Транзакции ")
        pages.trans.widget_trans_decline_rate.check_text('4.2%')
        pages.trans.btn_status_ru.click()
        page.locator("//*[@data-test-id='checkbox']//span[contains(text(), 'Refund')]").click()
        pages.trans.btn_status_ru.click()
        expect(page.locator("(//span[contains(text(), 'Refund')])[1]/ancestor::div[@data-test-id='badge']/*[@data-test-id='pip']")).to_have_css("color", "rgb(69, 143, 255)")
        pages.trans.widget_trans_decline_rate.check_text('—')
        pages.trans.widget_sum_trans_declined.check_text('$0.00')
        pages.trans.widget_count_trans_declined.check_text('0')
        pages.trans.widget_sum_spend.check_text('$47.64')
        pages.trans.widget_sum_trans.check_text('8')
        assert pages.trans.widget_sum_trans_graph.is_visible()
        assert pages.trans.widget_sum_spend_graph.is_visible()
        assert pages.trans.widget_count_trans_declined_graph.is_visible()
        assert pages.trans.widget_sum_trans_declined_graph.is_visible()
        assert pages.trans.widget_trans_decline_rate_graph.is_not_on_page()
        expect(page.locator("(//div[contains(@class, 'display_flex justify-content_space-between gap_4')])[2]/span")).to_have_css("color", "rgb(88, 182, 62)")
        expect(page.locator("(//*[@data-test-id='info-popover-activator'])[1]")).to_have_text("47,64 $")
        expect(page.locator("(//*[@data-test-id='info-popover-activator'])[1]")).to_have_css("color", "rgb(20, 21, 26)")
        expect(page.locator("(//*[@data-test-id='info-popover-activator'])[2]//span[1]/span")).to_have_css("color", "rgb(88, 182, 62)")

    @allure.title("Check reason decline transaction 'Card limit has been reached.'")
    def test_check_reason_1_decline_transaction(self, page: Page, pages: Pages, steps: Steps, playwright, api_request_context):
        page.goto("https://dev.app.devhost.io/transactions?dateRange=allTime&page=1")
        steps.auth.authorize_in_test(page, USER_RU.login, USER_RU.password, "Транзакции ")
        page.locator('(//*[@data-test-id="badge"]//span[contains(text(), "Declined")])[1]').hover()
        expect(page.locator('//*[@data-test-id="tooltip-content"]')).to_have_text('The transaction was declined for an unknown reason.')
        api_request(api_request_context, 34, MC, NOT_AVAILABLE_BALANCE, DECLINED, COUNTRY_US, CURRENCY_USD)
        page.reload()
        page.locator('(//*[@data-test-id="badge"])[1]').hover()
        expect(page.locator('//*[@data-test-id="tooltip-content"]')).to_have_text('Card limit has been reached')
        page.locator('(//*[@data-test-id="badge"])[1]').click()
        expect(page.locator('//*[@data-test-id="modal-dialog"]//span[contains(text(), "Card limit has been reached")]')).to_be_visible()

    @allure.title("Check reason decline transaction 'Insufficient funds in the account balance.' and banner")
    def test_check_reason_2_decline_transaction_and_banner(self, page: Page, pages: Pages, steps: Steps, playwright, api_request_context):
        api_move_money(api_request_context, 1, 11, 4, "deposit")
        page.goto("https://dev.app.devhost.io/transactions?dateRange=allTime&page=1")
        steps.auth.authorize_in_test(page, USER_RU.login, USER_RU.password, "Транзакции ")
        expect(
            page.locator('//*[@data-test-id="alert"]//span[contains(text(), "Средства закончились")]')).not_to_be_visible()
        page.locator('(//*[@data-test-id="badge"]//span[contains(text(), "Declined")])[1]').hover()
        api_request(api_request_context, 34, MC, NOT_ENOUGH_MONEY, DECLINED, COUNTRY_US, CURRENCY_USD)
        sleep(2)
        page.reload()
        expect(
            page.locator('//*[@data-test-id="alert"]//span[contains(text(), "Средства закончились")]')).to_be_visible()
        expect(page.locator(
            '//*[@data-test-id="alert"]//span[contains(text(), "На счете недостаточно средств для выполнения платежей")]')).to_be_visible()
        page.locator('(//*[@data-test-id="badge"])[1]').hover()
        expect(page.locator('//*[@data-test-id="tooltip-content"]')).to_have_text('Insufficient funds in the account balance')
        page.locator('(//*[@data-test-id="badge"])[1]').click()
        expect(page.locator('//*[@data-test-id="modal-dialog"]//span[contains(text(), "Insufficient funds in the account balance")]')).to_be_visible()
        page.locator('//*[@data-test-id="modal-header"]//*[@data-test-id="button"]').click()
        api_move_money(api_request_context, 20, 11, 4, "deposit")
        page.reload()
        expect(
            page.locator('//*[@data-test-id="alert"]//span[contains(text(), "Средства закончились")]')).not_to_be_visible()
        expect(page.locator(
            '//*[@data-test-id="alert"]//span[contains(text(), "На счете недостаточно средств для выполнения платежей")]')).not_to_be_visible()
